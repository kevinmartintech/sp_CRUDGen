IF OBJECT_ID('dbo.sp_CRUDGen') IS NULL
    BEGIN
        EXEC dbo.sp_executesql @stmt = N'CREATE PROCEDURE dbo.sp_CRUDGen AS BEGIN SET NOCOUNT ON; END';
    END;
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON;
GO
/**********************************************************************************************************************
** Author:      Kevin Martin
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Description: Used to generate the stored procedures listed below for your tables.
**               * Create (insert a single)
**               * CreateMultiple (insert multiple rows)
**               * Read (read a single row)
**               * ReadEager (read a single row and relationship joined table columns)
**               * Update (update a single row)
**               * UpdateMultiple (update multiple rows)
**               * Delete (delete a single row)
**               * DeleteMultiple (delete multiple rows with safe dynamic T-SQL for optional parameters, 
**                                  kitchen sink, Swiss army knife, catch-all queries)
**               * Search (safe dynamic T-SQL for optional parameters, kitchen sink, Swiss army knife, 
**                                  catch-all queries)
**               * Upsert (try to update the row first and fail back to insert)
**               * Indate (try to insert the row first and fail back to update)
**
** Supports:    Runs on SQL Server 2016, 2017, 2019, Azure SQL Server. JSON support can be changed to XML for 2014 and lower.
**
** Notes:       sp_CRUDGen will auto-generate and regenerate stored procedures for you. If you want to customize 
**               one of the generated stored procedures you can remove <auto-generated> comment section and the stored 
**               procedure will not be overwritten.
**
**              Install and execute sp_CRUDGen in the user database and not master.
**
**              Runtime: This depends on the complexity of your table structure.
**
**              Fork the repo to change the T-SQL style (or format with a tool like Redgate SQL Prompt) and naming 
**               conventions. Remember to create a pull request if you added something cool so the rest of the community 
**               can benefit.
**
**              Table names should be PascalCase for best table alias naming.
**
**              Use FOREIGN KEY REFERENCES between tables for ReadEager and Search to recurse over related tables.
**
**              There are paramaters you can set in sp_CRUDGen to customize for your column naming convention.
**
**                @RowCreatePersonColumnName - is the column name used in your tables for the person who created a row. 
**                                              FOREIGN KEY REFERENCES to a Person table.
**                @RowCreateTimeColumnName   - is the column name used in your tables to capture the datetime when the 
**                                              row was created.
**                @RowCreateTimeFunction     - is the system date function you want used in your tables for the 
**                                              @RowCreateTimeColumnName to capture when the row was created.
**
**                @RowUpdatePersonColumnName - is the column name used in your tables for the person who updated a row. 
**                                              FOREIGN KEY REFERENCES to a Person table.
**                @RowUpdateTimeColumnName   - is the column name used in your tables to capture the datetime when the 
**                                              row was last updated.
**                @RowUpdateTimeFunction     - is the system date function you want used in your tables for the 
**                                              @RowUpdateTimeColumnName to capture when the row was updated.
**
**                @RowVersionStampColumnName - is the column name in your tables for the rowversion/timestamp used for 
**                                              optimistic concurrency in the delete and update stored procedures.
**
**                @TemporalRowStartColumName - is the system-versioned temporal tables column name in your tables for the 
**                                              start period (GENERATED ALWAYS AS ROW START). This column will be ignored 
**                                              for inserts and deletes.
**                @TemporalRowEndColumName   - is the system-versioned temporal tables column name in your tables for the 
**                                              end period (GENERATED ALWAYS AS ROW END). This column will be ignored 
**                                              for inserts and deletes.
**                
**              The Search stored procedure does not work with every column data type.
**
**              If you use extended properties description names on tables and columns they will be included as comments 
**               in the stored procedures.
**
**              Do not use SQL Server reserved keywords in object names.
**
** Parameters:  See comments to the right of the parameters below.
**********************************************************************************************************************/
ALTER PROCEDURE dbo.sp_CRUDGen (
    @GenerateStoredProcedures  bit           = 0                        /* 0 = Will only create the generated T-SQL to create the stored procedures, 1 = Will also create the stored procedures */
   ,@SchemaTableOrViewName     nvarchar(200) = NULL                     /* NULL = Generate all tables with prefix & views, [SCHEMA.TABLEORVIEWNAME] or [TABLEORVIEWNAME] for just one table or view */
   ,@PrefixTable               nvarchar(5)   = NULL                     /* NULL = Generate all tables, not empty will generate for tables with prefix */
   ,@GenerateCreate            bit           = 1                        /* 1 = Generate the Create stored procedure, 0 = Will not generate the Create stored procedure */
   ,@GenerateCreateMultiple    bit           = 1                        /* 1 = Generate the Create stored procedure, 0 = Will not generate the Create stored procedure */
   ,@GenerateRead              bit           = 1                        /* 1 = Generate the Read stored procedure, 0 = Will not generate the Read stored procedure */
   ,@GenerateReadEager         bit           = 1                        /* 1 = Generate the ReadEager stored procedure, 0 = Will not generate the ReadEager stored procedure */
   ,@GenerateUpdate            bit           = 1                        /* 1 = Generate the Update stored procedure, 0 = Will not generate the Update stored procedure */
   ,@GenerateUpdateMultiple    bit           = 1                        /* 1 = Generate the Update stored procedure, 0 = Will not generate the Update stored procedure */
   ,@GenerateUpsert            bit           = 1                        /* 1 = Generate the Upsert stored procedure, 0 = Will not generate the Upsert stored procedure */
   ,@GenerateIndate            bit           = 0                        /* 1 = Generate the Indate stored procedure, 0 = Will not generate the Indate stored procedure */
   ,@GenerateDelete            bit           = 1                        /* 1 = Generate the Delete stored procedure, 0 = Will not generate the Delete stored procedure */
   ,@GenerateDeleteMultiple    bit           = 1                        /* 1 = Generate the DeleteMultiple stored procedure, 0 = Will not generate the DeleteMultiple stored procedure */
   ,@GenerateSearch            bit           = 1                        /* 1 = Generate the Search stored procedure, 0 = Will not generate the Search stored procedure */
   ,@SearchSeparatorString     nvarchar(MAX) = N' to '                  /* Set this string to match your separator used when passing in a search parameter using the 'Between', 'BetweenWithBlanks', 'NotBetween', and 'NotBetweenWithBlanks' operators */
   ,@RowCreatePersonColumnName nvarchar(MAX) = N'RowCreatePersonId  '     /* Update this to match your column name */
   ,@RowCreatePersonInclude    bit           = 0                        /* 1 = Will generate table joins to the person table, 0 = Will not generate table joins to the person table */
   ,@RowCreateTimeColumnName   nvarchar(MAX) = N'RowCreateTime'         /* Update this to match your column name */
   ,@RowCreateTimeFunction     varchar(30)   = 'SYSDATETIMEOFFSET()'    /* {SYSDATETIMEOFFSET() | SYSUTCDATETIME() | SYSDATETIME() | GETUTCDATE() | GETDATE() | CURRENT_TIMESTAMP} */
   ,@RowUpdatePersonColumnName nvarchar(MAX) = N'RowModifyPersonId'     /* Update this to match your column name */
   ,@RowUpdatePersonInclude    bit           = 0                        /* 1 = Will generate table joins to the person table, 0 = Will not generate table joins to the person table */
   ,@RowUpdateTimeColumnName   nvarchar(MAX) = N'RowModifyTime'         /* Update this to match your column name */
   ,@RowUpdateTimeFunction     varchar(30)   = 'SYSDATETIMEOFFSET()'    /* {SYSDATETIMEOFFSET() | SYSUTCDATETIME() | SYSDATETIME() | GETUTCDATE() | GETDATE() | CURRENT_TIMESTAMP} */
   ,@RowVersionStampColumnName nvarchar(MAX) = N'RowVersionStamp'       /* Is the column name in your tables for the rowversion/timestamp used for optimistic concurrency in the delete and update stored procedures. */
   ,@TemporalRowStartColumName nvarchar(MAX) = N'RowValidFromTime'      /* Is the system-versioned temporal tables column name in your tables for the start period (GENERATED ALWAYS AS ROW START). This column will be ignored for inserts and deletes. */
   ,@TemporalRowEndColumName   nvarchar(MAX) = N'RowValidToTime'        /* Is the system-versioned temporal tables column name in your tables for the end period (GENERATED ALWAYS AS ROW END). This column will be ignored for inserts and deletes. */
   ,@ForceTemporalForView      bit           = 0                        /* 1 = Forces the view to allow temporal functionality, 0 = The view will not allow temporal functionality */
   ,@VersionCheckMode          bit           = 0                        /* 1 = Will only return the version number and not execute, 0 = Will execute this stored procedure */
   ,@Version                   varchar(30)   = NULL OUTPUT
   ,@VersionDate               datetime      = NULL OUTPUT
)
WITH EXECUTE AS CALLER, RECOMPILE
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

        /**********************************************************************************************************************
        ** Declare varibles
        **********************************************************************************************************************/
        DECLARE @ScriptVersionName nvarchar(50);
        DECLARE @ProductVersion nvarchar(128);
        DECLARE @ProductVersionMajor decimal(10, 2);
        DECLARE @ProductVersionMinor decimal(10, 2);
        DECLARE @StringToExecute nvarchar(MAX);
        DECLARE @ExecuteOutputString nvarchar(MAX);
        DECLARE @ExecuteDropString nvarchar(MAX);
        DECLARE @ExecuteCreateString nvarchar(MAX);
        DECLARE @ExecuteCreateMultipleString nvarchar(MAX);
        DECLARE @ExecuteReadString nvarchar(MAX);
        DECLARE @ExecuteReadEagerString nvarchar(MAX);
        DECLARE @ExecuteUpdateString nvarchar(MAX);
        DECLARE @ExecuteUpdateMultipleString nvarchar(MAX);
        DECLARE @ExecuteUpsertString nvarchar(MAX);
        DECLARE @ExecuteIndateString nvarchar(MAX);
        DECLARE @ExecuteDeleteString nvarchar(MAX);
        DECLARE @ExecuteDeleteMultipleString nvarchar(MAX);
        DECLARE @ExecuteSearchString nvarchar(MAX);
        DECLARE @ParameterString nvarchar(MAX);
        DECLARE @SP_ExecuteSQLParameterDefinitionString nvarchar(MAX);
        DECLARE @SP_ExecuteSQLParametersString nvarchar(MAX);
        DECLARE @SelectString nvarchar(MAX);
        DECLARE @InsertIntoString nvarchar(MAX);
        DECLARE @InsertIntoSelectString nvarchar(MAX);
        DECLARE @InsertIntoValuesString nvarchar(MAX);
        DECLARE @UpdateString nvarchar(MAX);
        DECLARE @UpdateJSONString nvarchar(MAX);
        DECLARE @OutputString nvarchar(MAX);
        DECLARE @JoinString nvarchar(MAX);
        DECLARE @FromString nvarchar(MAX);
        DECLARE @FromSearchKeysString nvarchar(MAX);
        DECLARE @TableListInsertValuesString nvarchar(MAX);
        DECLARE @WhereString nvarchar(MAX);
        DECLARE @BetweenVariableString nvarchar(MAX);
        DECLARE @TempTableListString nvarchar(MAX);
        DECLARE @OrderColumnString nvarchar(MAX);
        DECLARE @IdentityColumnNameString nvarchar(MAX);
        DECLARE @IdentityColumnTableAliasString nvarchar(MAX);
        DECLARE @TemporaryTableStringColumnType nvarchar(MAX);
        DECLARE @TemporaryTableOutputStringColumnType nvarchar(MAX);
        DECLARE @TemporaryJSONTableStringColumnType nvarchar(MAX);
        DECLARE @OPENJSONWithCreateString nvarchar(MAX);
        DECLARE @OPENJSONWithUpdateString nvarchar(MAX);
        DECLARE @TemporaryTableStringType nvarchar(MAX);
        DECLARE @TemporaryTableOutputStringType nvarchar(MAX);
        DECLARE @TemporaryJSONTableStringType nvarchar(MAX);
        DECLARE @UserNameString nvarchar(MAX);
        DECLARE @CreateTimeString nvarchar(MAX);
        DECLARE @NewLineString nvarchar(MAX);
        DECLARE @MITLicenseCommentString nvarchar(MAX);
        DECLARE @AutoGeneratedCommentString nvarchar(MAX);
        DECLARE @SeparatorStartingPosition int;
        DECLARE @StoredProcedureId int;
        DECLARE @SchemaName nvarchar(MAX);
        DECLARE @TableName nvarchar(MAX);
        DECLARE @TableAlias nvarchar(MAX);
        DECLARE @TableDescription nvarchar(MAX);
        DECLARE @ProcedureName nvarchar(MAX);
        DECLARE @ProcedureType nvarchar(MAX);
        DECLARE @table_object_id int;

        /**********************************************************************************************************************
        ** Set varibles
        **********************************************************************************************************************/
        SET @Version = '3.02.07';
        SET @VersionDate = '20220719';
        SET @ScriptVersionName = N'sp_CRUDGen v' + @Version + N' - ' + DATENAME(MONTH, @VersionDate) + N' ' + RIGHT('0' + DATENAME(DAY, @VersionDate), 2) + N', ' + DATENAME(YEAR, @VersionDate);
        SET @ExecuteOutputString = N'';
        SET @UserNameString = CAST(SYSTEM_USER AS nvarchar(MAX));
        SET @CreateTimeString = CAST(CONVERT(nvarchar(30), GETUTCDATE(), 121) AS nvarchar(MAX)) + N' +00:00';
        SET @NewLineString = CAST(CHAR(13) + CHAR(10) AS nvarchar(MAX));
        SET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS nvarchar(128)); /* major.minor.build.revision */
        SET @ProductVersionMajor = SUBSTRING(@ProductVersion, 1, CHARINDEX('.', @ProductVersion) + 1);
        SET @ProductVersionMinor = PARSENAME(CONVERT(varchar(32), @ProductVersion), 2);
        SET @StringToExecute = N'';

        SET @MITLicenseCommentString = N'/**********************************************************************************************************************
** MIT License
** 
** Copyright (c) ' + CAST(YEAR(GETUTCDATE()) AS nvarchar(MAX)) + N' Kevin Martin Tech, LLC. (https://kevinmartin.tech)
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
** documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
** permit persons to whom the Software is furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in all copies or substantial portions of 
** the Software.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
** WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS 
** OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
** OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
**********************************************************************************************************************/';
        SET @AutoGeneratedCommentString = N'/* <auto-generated>
    This stored procedure was generated from the stored procedure named ' + CAST(ISNULL(OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID), 'dbo.sp_CRUDGen') AS nvarchar(MAX)) + N'
    NOTES: You can remove this comment section to keep this stored procedure from being overwritten.
            You can/should remove SELECT, UPDATE columns or FROM JOINs that are not needed.
</auto-generated> */';

        /* Exit if only the version is being checked */
        IF @VersionCheckMode = 1
            BEGIN
                RAISERROR(N'%s', 0, 1, @ScriptVersionName) WITH NOWAIT;
                RETURN 0;
            END;

        /**********************************************************************************************************************
        ** Create and load the stored procedure table
        **********************************************************************************************************************/
        IF OBJECT_ID('tempdb..#StoredProcedureList') IS NOT NULL
            BEGIN
                DROP TABLE #StoredProcedureList;
            END;
        CREATE TABLE #StoredProcedureList (
            StoredProcedureId    int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
           ,table_object_id     int           NOT NULL
           ,table_schema_id     int           NOT NULL
           ,SchemaName          nvarchar(MAX) NOT NULL
           ,TableName           nvarchar(MAX) NOT NULL
           ,TableDescription    nvarchar(MAX) NOT NULL
           ,ProcedureName       nvarchar(MAX) NOT NULL
           ,ProcedureType       nvarchar(MAX) NOT NULL
           ,IsExistsFlag        bit           NOT NULL
           ,IsAutoGeneratedFlag bit           NOT NULL
           ,IsTemporalTableFlag bit           NOT NULL DEFAULT 0
           ,IsProcessedFlag     bit           NOT NULL
        );

        /* Parse the passed in parameter */
        IF @SchemaTableOrViewName IS NOT NULL
            BEGIN
                SET @SeparatorStartingPosition = CHARINDEX('.', @SchemaTableOrViewName);
                IF @SeparatorStartingPosition > 0
                    BEGIN
                        SELECT
                            @SchemaName = LEFT(@SchemaTableOrViewName, @SeparatorStartingPosition - 1)
                           ,@TableName  = RIGHT(@SchemaTableOrViewName, LEN(@SchemaTableOrViewName) - @SeparatorStartingPosition);
                    END;
                ELSE
                    BEGIN
                        SELECT @SchemaName = NULL, @TableName = @SchemaTableOrViewName;
                    END;
            END;

        /* Insert into stored procedure list for tables */
        INSERT INTO #StoredProcedureList (
            table_object_id
           ,table_schema_id
           ,SchemaName
           ,TableName
           ,TableDescription
           ,ProcedureName
           ,ProcedureType
           ,IsExistsFlag
           ,IsAutoGeneratedFlag
           ,IsProcessedFlag
        )
        SELECT
            table_object_id     = T.object_id
           ,table_schema_id     = S.schema_id
           ,SchemaName          = S.name
           ,TableName           = T.name
           ,TableDescription    = ISNULL(CAST(EP.value AS nvarchar(MAX)), N'')
           ,ProcedureName       = CAST(T.name + P.ProcedureType AS sysname)
           ,ProcedureType       = P.ProcedureType
           ,IsExistsFlag        = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(T.name + P.ProcedureType AS sysname)
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsAutoGeneratedFlag = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(T.name + P.ProcedureType AS sysname)
                                                AND SM2.definition LIKE '%<auto-generated>%'
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsProcessedFlag     = 0
        FROM
            sys.tables                              AS T
            INNER JOIN sys.schemas                  AS S
                ON S.schema_id = T.schema_id
            LEFT OUTER JOIN sys.extended_properties AS EP
                ON T.object_id = EP.major_id
                AND EP.minor_id = 0
                AND EP.class = 1
                AND EP.name = 'MS_Description'
            CROSS JOIN (
                SELECT
                    ProcedureType = 'Create'
                WHERE
                    @GenerateCreate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'CreateMultiple'
                WHERE
                    @GenerateCreateMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Read'
                WHERE
                    @GenerateRead = 1
                UNION ALL
                SELECT
                    ProcedureType = 'ReadEager'
                WHERE
                    @GenerateReadEager = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Update'
                WHERE
                    @GenerateUpdate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'UpdateMultiple'
                WHERE
                    @GenerateUpdateMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Upsert'
                WHERE
                    @GenerateUpsert = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Indate'
                WHERE
                    @GenerateIndate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Delete'
                WHERE
                    @GenerateDelete = 1
                UNION ALL
                SELECT
                    ProcedureType = 'DeleteMultiple'
                WHERE
                    @GenerateDeleteMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Search'
                WHERE
                    @GenerateSearch = 1
            )                                       AS P
        WHERE
            (T.name = @TableName OR @TableName IS NULL)
		AND ((T.name like @PrefixTable + '%' OR @PrefixTable IS NULL) AND T.name <> 'sysdiagrams')
        AND (S.name = @SchemaName OR @SchemaName IS NULL)
        ORDER BY
            S.name
           ,T.name
        OPTION (RECOMPILE);

        /* Insert into stored procedure list for views */
        INSERT INTO #StoredProcedureList (
            table_object_id
           ,table_schema_id
           ,SchemaName
           ,TableName
           ,TableDescription
           ,ProcedureName
           ,ProcedureType
           ,IsExistsFlag
           ,IsAutoGeneratedFlag
           ,IsProcessedFlag
           ,IsTemporalTableFlag
        )
        SELECT
            table_object_id     = V.object_id
           ,table_schema_id     = S.schema_id
           ,SchemaName          = S.name
           ,TableName           = V.name
           ,TableDescription    = ISNULL(CAST(EP.value AS nvarchar(MAX)), N'')
           ,ProcedureName       = CAST(V.name + P.ProcedureType AS sysname)
           ,ProcedureType       = P.ProcedureType
           ,IsExistsFlag        = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(V.name + P.ProcedureType AS sysname)
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsAutoGeneratedFlag = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(V.name + P.ProcedureType AS sysname)
                                                AND SM2.definition LIKE '%<auto-generated>%'
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsProcessedFlag     = 0
           ,IsTemporalTableFlag = CASE WHEN @ForceTemporalForView = 1 THEN 1 ELSE 0 END
        FROM
            sys.views                               AS V
            INNER JOIN sys.schemas                  AS S
                ON S.schema_id = V.schema_id
            LEFT OUTER JOIN sys.extended_properties AS EP
                ON V.object_id = EP.major_id
                AND EP.minor_id = 0
                AND EP.class = 1
                AND EP.name = 'MS_Description'
            CROSS JOIN (
                SELECT
                    ProcedureType = 'Create'
                WHERE
                    @GenerateCreate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'CreateMultiple'
                WHERE
                    @GenerateCreateMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Read'
                WHERE
                    @GenerateRead = 1
                UNION ALL
                SELECT
                    ProcedureType = 'ReadEager'
                WHERE
                    @GenerateReadEager = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Update'
                WHERE
                    @GenerateUpdate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'UpdateMultiple'
                WHERE
                    @GenerateUpdateMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Upsert'
                WHERE
                    @GenerateUpsert = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Indate'
                WHERE
                    @GenerateIndate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Delete'
                WHERE
                    @GenerateDelete = 1
                UNION ALL
                SELECT
                    ProcedureType = 'DeleteMultiple'
                WHERE
                    @GenerateDeleteMultiple = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Search'
                WHERE
                    @GenerateSearch = 1
            )                                       AS P
        WHERE
            (V.name = @TableName OR @TableName IS NULL)
        AND (S.name = @SchemaName OR @SchemaName IS NULL)
        ORDER BY
            S.name
           ,V.name
        OPTION (RECOMPILE);

        /* Delete stored procedures that are not going to be dropped and created */
        DELETE FROM
        #StoredProcedureList
        WHERE
            (IsExistsFlag = 1 AND IsAutoGeneratedFlag = 0);

        /* Temporal Table Clean Up */
        IF @ProductVersionMajor >= 13 /* SQL Server 2016+ */
            BEGIN

                /* Drop Temporal History Tables */
                SET @StringToExecute = N'
DELETE 
    SPL
FROM 
    #StoredProcedureList AS SPL
    INNER JOIN sys.tables AS T
        ON SPL.table_object_id = T.object_id
WHERE 
    T.temporal_type = 1';

                EXEC sys.sp_executesql @stmt = @StringToExecute;

                /* Update Temporal Tables */
                IF @ForceTemporalForView = 0
                    BEGIN
                    SET @StringToExecute = N'
UPDATE
    SPL
SET 
    SPL.IsTemporalTableFlag = 1
FROM 
    #StoredProcedureList AS SPL
    INNER JOIN sys.tables AS T
        ON SPL.table_object_id = T.object_id
WHERE 
    T.temporal_type = 2';
                        EXEC sys.sp_executesql @stmt = @StringToExecute;
                    END;
            END;

        /* Build the FROM clause variables */
        DECLARE
            @last_parent_object_id     int
           ,@last_referenced_object_id int
           ,@last_referenced_alias     nvarchar(MAX);

        /* Build the FROM clause varibles */
        DECLARE
            @TableListId                        int
           ,@Depth                              int
           ,@parent_object_id                   int
           ,@referenced_object_id               int
           ,@referenced_schema                  nvarchar(MAX)
           ,@referenced_table                   nvarchar(MAX)
           ,@referenced_table_description       nvarchar(MAX)
           ,@referenced_alias                   nvarchar(MAX)
           ,@referenced_column                  nvarchar(MAX)
           ,@parent_schema                      nvarchar(MAX)
           ,@parent_table                       nvarchar(MAX)
           ,@parent_alias                       nvarchar(MAX)
           ,@parent_column                      nvarchar(MAX)
           ,@parent_column_is_nullable          bit
           ,@HasTriggersFlag                    bit
           ,@IsTemporalTableStoredProcedureFlag bit
           ,@IsTemporalTableTableFlag           bit
           ,@HasRowVersionStampFlag             bit;


        /**********************************************************************************************************************
        ** Loop over the list of stored procedures
        **********************************************************************************************************************/
        WHILE EXISTS (SELECT * FROM #StoredProcedureList AS TL WHERE TL.IsProcessedFlag = 0)
            BEGIN
                /**********************************************************************************************************************
                ** Set the variables to the next unprocessed row
                **********************************************************************************************************************/
                SELECT TOP (1)
                    @StoredProcedureId                   = SPL.StoredProcedureId
                   ,@SchemaName                         = SPL.SchemaName
                   ,@TableName                          = SPL.TableName
                   ,@TableDescription                   = SPL.TableDescription
                   ,@ProcedureName                      = SPL.ProcedureName
                   ,@ProcedureType                      = SPL.ProcedureType
                   ,@table_object_id                    = SPL.table_object_id
                   ,@IsTemporalTableStoredProcedureFlag = SPL.IsTemporalTableFlag
                FROM
                    #StoredProcedureList AS SPL
                WHERE
                    SPL.IsProcessedFlag = 0
                ORDER BY
                    SPL.StoredProcedureId
                OPTION (RECOMPILE);

                /**********************************************************************************************************************
                ** Reset strings
                **********************************************************************************************************************/
                SET @ParameterString = N'';
                SET @SP_ExecuteSQLParameterDefinitionString = N'';
                SET @SP_ExecuteSQLParametersString = N'';
                SET @SelectString = N'';
                SET @InsertIntoString = N'';
                SET @InsertIntoSelectString = N'';
                SET @InsertIntoValuesString = N'';
                SET @UpdateString = N'';
                SET @UpdateJSONString = N'';
                SET @OutputString = N'';
                SET @JoinString = N'';
                SET @FromString = N'';
                SET @FromSearchKeysString = N'';
                SET @TableListInsertValuesString = N'';
                SET @WhereString = N'';
                SET @TableAlias = N'';
                SET @BetweenVariableString = N'';
                SET @TempTableListString = N'';
                SET @OrderColumnString = N'';
                SET @IdentityColumnNameString = N'';
                SET @IdentityColumnTableAliasString = N'';
                SET @TemporaryTableStringColumnType = N'';
                SET @TemporaryTableOutputStringColumnType = N'';
                SET @TemporaryJSONTableStringColumnType = N'';
                SET @OPENJSONWithCreateString = N'';
                SET @OPENJSONWithUpdateString = N'';
                SET @TemporaryTableStringType = N'';
                SET @TemporaryTableOutputStringType = N'';
                SET @TemporaryJSONTableStringType = N'';
                SET @ExecuteDropString = N'';
                SET @ExecuteCreateString = N'';
                SET @ExecuteCreateMultipleString = N'';
                SET @ExecuteReadString = N'';
                SET @ExecuteReadEagerString = N'';
                SET @ExecuteUpdateString = N'';
                SET @ExecuteUpdateMultipleString = N'';
                SET @ExecuteUpsertString = N'';
                SET @ExecuteIndateString = N'';
                SET @ExecuteDeleteString = N'';
                SET @ExecuteDeleteMultipleString = N'';
                SET @ExecuteSearchString = N'';
                SET @HasRowVersionStampFlag = 0;


                /**********************************************************************************************************************
                ** Create and load the table list
                **********************************************************************************************************************/
                IF OBJECT_ID('tempdb..#TableList') IS NOT NULL
                    BEGIN
                        DROP TABLE #TableList;
                    END;
                CREATE TABLE #TableList (
                    TableListId                  int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
                   ,Depth                        int           NULL
                   ,parent_object_id             int           NULL
                   ,referenced_object_id         int           NULL
                   ,referenced_schema            nvarchar(MAX) NULL
                   ,referenced_table             nvarchar(MAX) NULL
                   ,referenced_table_description nvarchar(MAX) NULL
                   ,referenced_alias             nvarchar(MAX) NULL
                   ,referenced_column            nvarchar(MAX) NULL
                   ,parent_schema                nvarchar(MAX) NULL
                   ,parent_table                 nvarchar(MAX) NULL
                   ,parent_alias                 nvarchar(MAX) NULL
                   ,parent_column                nvarchar(MAX) NULL
                   ,parent_column_is_nullable    bit           NULL
                   ,HasTriggersFlag              bit           NULL
                   ,IsTemporalFlag               bit           NULL DEFAULT 0
                   ,IsProcessedFlag              bit           NULL
                   ,HierarchyPath                nvarchar(MAX) NULL
                );

                /* Find main table */
                INSERT INTO #TableList (
                    parent_object_id
                   ,referenced_object_id
                   ,Depth
                   ,referenced_schema
                   ,referenced_table
                )
                SELECT
                    parent_object_id     = NULL
                   ,referenced_object_id = T.object_id
                   ,Depth                = 0
                   ,referenced_schema    = S.name
                   ,referenced_table     = T.name
                FROM
                    sys.tables             AS T
                    INNER JOIN sys.schemas AS S
                        ON T.schema_id = S.schema_id
                WHERE
                    T.object_id = @table_object_id;

                /* Find main view */
                INSERT INTO #TableList (
                    parent_object_id
                   ,referenced_object_id
                   ,Depth
                   ,referenced_schema
                   ,referenced_table
                )
                SELECT
                    parent_object_id     = NULL
                   ,referenced_object_id = V.object_id
                   ,Depth                = 0
                   ,referenced_schema    = S.name
                   ,referenced_table     = V.name
                FROM
                    sys.views              AS V
                    INNER JOIN sys.schemas AS S
                        ON V.schema_id = S.schema_id
                WHERE
                    V.object_id = @table_object_id;

                /* Find main recursive tables */
                WITH MainRecursive
                  AS (
                      /* Find base table */
                      SELECT DISTINCT
                          parent_object_id          = FKC.parent_object_id
                         ,parent_schema             = S1.name
                         ,parent_table              = T1.name
                         ,parent_column             = C1.name
                         ,parent_column_is_nullable = C1.is_nullable
                         ,referenced_object_id      = FKC.referenced_object_id
                         ,referenced_schema         = S2.name
                         ,referenced_table          = T2.name
                         ,referenced_column         = C2.name
                         ,Depth                     = 1
                         ,HierarchyPath             = CAST(FKC.referenced_object_id AS varchar(MAX)) + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                          sys.foreign_key_columns AS FKC
                          INNER JOIN sys.objects  AS O
                              ON O.object_id   = FKC.constraint_object_id
                          INNER JOIN sys.tables   AS T1
                              ON T1.object_id  = FKC.parent_object_id
                          INNER JOIN sys.schemas  AS S1
                              ON T1.schema_id  = S1.schema_id
                          INNER JOIN sys.columns  AS C1
                              ON C1.column_id  = FKC.parent_column_id
                              AND C1.object_id = T1.object_id
                          INNER JOIN sys.tables   AS T2
                              ON T2.object_id  = FKC.referenced_object_id
                          INNER JOIN sys.schemas  AS S2
                              ON T2.schema_id  = S2.schema_id
                          INNER JOIN sys.columns  AS C2
                              ON C2.column_id  = FKC.referenced_column_id
                              AND C2.object_id = T2.object_id
                      WHERE
                          FKC.parent_object_id       = @table_object_id
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowUpdatePersonColumnName) > 1
                                                                 THEN @RowUpdatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowUpdatePersonInclude = 1
                      )
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowCreatePersonColumnName) > 1
                                                                 THEN @RowCreatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowCreatePersonInclude = 1
                      )
                      UNION ALL
                      /* Perform the recursive query  */
                      SELECT
                          parent_object_id          = FKC.parent_object_id
                         ,parent_schema             = S1.name
                         ,parent_table              = T1.name
                         ,parent_column             = C1.name
                         ,parent_column_is_nullable = C1.is_nullable
                         ,referenced_object_id      = FKC.referenced_object_id
                         ,referenced_schema         = S2.name
                         ,referenced_table          = T2.name
                         ,referenced_column         = C2.name
                         ,Depth                     = MR.Depth + 1
                         ,HierarchyPath             = MR.HierarchyPath + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                          sys.foreign_key_columns  AS FKC
                          INNER JOIN sys.objects   AS O
                              ON O.object_id          = FKC.constraint_object_id
                          INNER JOIN sys.tables    AS T1
                              ON T1.object_id         = FKC.parent_object_id
                          INNER JOIN sys.schemas   AS S1
                              ON T1.schema_id         = S1.schema_id
                          INNER JOIN sys.columns   AS C1
                              ON C1.column_id         = FKC.parent_column_id
                              AND C1.object_id        = T1.object_id
                          INNER JOIN sys.tables    AS T2
                              ON T2.object_id         = FKC.referenced_object_id
                          INNER JOIN sys.schemas   AS S2
                              ON T2.schema_id         = S2.schema_id
                          INNER JOIN sys.columns   AS C2
                              ON C2.column_id         = FKC.referenced_column_id
                              AND C2.object_id        = T2.object_id
                          INNER JOIN MainRecursive AS MR
                              ON FKC.parent_object_id = MR.referenced_object_id
                      WHERE
                          FKC.parent_object_id       <> FKC.referenced_object_id
                      AND MR.HierarchyPath NOT LIKE '%->' + CAST(FKC.parent_object_id AS varchar(MAX)) + '->%'
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowUpdatePersonColumnName) > 1
                                                                 THEN @RowUpdatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowUpdatePersonInclude = 1
                      )
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowCreatePersonColumnName) > 1
                                                                 THEN @RowCreatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowCreatePersonInclude = 1
                      )
                  )
                INSERT INTO #TableList (
                    parent_object_id
                   ,parent_schema
                   ,parent_table
                   ,parent_column
                   ,parent_column_is_nullable
                   ,referenced_object_id
                   ,referenced_schema
                   ,referenced_table
                   ,referenced_column
                   ,Depth
                   ,HierarchyPath
                )
                SELECT
                    A.parent_object_id
                   ,A.parent_schema
                   ,A.parent_table
                   ,A.parent_column
                   ,A.parent_column_is_nullable
                   ,A.referenced_object_id
                   ,A.referenced_schema
                   ,A.referenced_table
                   ,A.referenced_column
                   ,A.Depth
                   ,A.HierarchyPath
                FROM
                    MainRecursive AS A;

                /* Find inheratance recursive tables */
                WITH InheratanceRecursive
                  AS (
                      /* Find base tables */
                      SELECT DISTINCT
                          parent_object_id          = FKC.referenced_object_id
                         ,parent_schema             = S1.name
                         ,parent_table              = T1.name
                         ,parent_column             = C1.name
                         ,parent_column_is_nullable = 1
                         ,referenced_object_id      = FKC.parent_object_id
                         ,referenced_schema         = S2.name
                         ,referenced_table          = T2.name
                         ,referenced_column         = C2.name
                         ,Depth                     = 1
                         ,HierarchyPath             = CAST(FKC.referenced_object_id AS varchar(MAX)) + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                          sys.foreign_key_columns AS FKC
                          INNER JOIN sys.objects  AS O
                              ON O.object_id   = FKC.constraint_object_id
                          INNER JOIN sys.tables   AS T1
                              ON T1.object_id  = FKC.referenced_object_id
                          INNER JOIN sys.schemas  AS S1
                              ON T1.schema_id  = S1.schema_id
                          INNER JOIN sys.columns  AS C1
                              ON C1.column_id  = FKC.parent_column_id
                              AND C1.object_id = T1.object_id
                          INNER JOIN sys.tables   AS T2
                              ON T2.object_id  = FKC.parent_object_id
                          INNER JOIN sys.schemas  AS S2
                              ON T2.schema_id  = S2.schema_id
                          INNER JOIN sys.columns  AS C2
                              ON C2.column_id  = FKC.referenced_column_id
                              AND C2.object_id = T2.object_id
                      WHERE
                          FKC.referenced_object_id   = @table_object_id
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowUpdatePersonColumnName) > 1
                                                                 THEN @RowUpdatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowUpdatePersonInclude = 1
                      )
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowCreatePersonColumnName) > 1
                                                                 THEN @RowCreatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowCreatePersonInclude = 1
                      )
                      AND C1.name                    = C2.name
                      UNION ALL
                      /* Perform the recursive query  */
                      SELECT
                          parent_object_id          = FKC.parent_object_id
                         ,parent_schema             = S1.name
                         ,parent_table              = T1.name
                         ,parent_column             = C1.name
                         ,parent_column_is_nullable = 1
                         ,referenced_object_id      = FKC.referenced_object_id
                         ,referenced_schema         = S2.name
                         ,referenced_table          = T2.name
                         ,referenced_column         = C2.name
                         ,Depth                     = MR.Depth + 1
                         ,HierarchyPath             = MR.HierarchyPath + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                          sys.foreign_key_columns         AS FKC
                          INNER JOIN sys.objects          AS O
                              ON O.object_id          = FKC.constraint_object_id
                          INNER JOIN sys.tables           AS T1
                              ON T1.object_id         = FKC.parent_object_id
                          INNER JOIN sys.schemas          AS S1
                              ON T1.schema_id         = S1.schema_id
                          INNER JOIN sys.columns          AS C1
                              ON C1.column_id         = FKC.parent_column_id
                              AND C1.object_id        = T1.object_id
                          INNER JOIN sys.tables           AS T2
                              ON T2.object_id         = FKC.referenced_object_id
                          INNER JOIN sys.schemas          AS S2
                              ON T2.schema_id         = S2.schema_id
                          INNER JOIN sys.columns          AS C2
                              ON C2.column_id         = FKC.referenced_column_id
                              AND C2.object_id        = T2.object_id
                          INNER JOIN InheratanceRecursive AS MR
                              ON FKC.parent_object_id = MR.referenced_object_id
                      WHERE
                          FKC.parent_object_id       <> FKC.referenced_object_id
                      AND MR.HierarchyPath NOT LIKE '%->' + CAST(FKC.parent_object_id AS varchar(MAX)) + '->%'
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowUpdatePersonColumnName) > 1
                                                                 THEN @RowUpdatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowUpdatePersonInclude = 1
                      )
                      AND (
                          C1.name                    <> CASE WHEN LEN(@RowCreatePersonColumnName) > 1
                                                                 THEN @RowCreatePersonColumnName
                                                            ELSE N'[NOTUSED]'
                                                        END
                          OR @RowCreatePersonInclude = 1
                      )
                      AND FKC.parent_object_id       <> @table_object_id
                      AND FKC.referenced_object_id   <> @table_object_id
                  )
                INSERT INTO #TableList (
                    parent_object_id
                   ,parent_schema
                   ,parent_table
                   ,parent_column
                   ,parent_column_is_nullable
                   ,referenced_object_id
                   ,referenced_schema
                   ,referenced_table
                   ,referenced_column
                   ,Depth
                   ,HierarchyPath
                )
                SELECT
                    A.parent_object_id
                   ,A.parent_schema
                   ,A.parent_table
                   ,A.parent_column
                   ,A.parent_column_is_nullable
                   ,A.referenced_object_id
                   ,A.referenced_schema
                   ,A.referenced_table
                   ,A.referenced_column
                   ,A.Depth
                   ,A.HierarchyPath
                FROM
                    InheratanceRecursive AS A;

                /* Perform Numbering */
                WITH Numbering
                  AS (
                      SELECT
                          TableListId               = TL.TableListId
                         ,parent_object_id          = TL.parent_object_id
                         ,referenced_object_id      = TL.referenced_object_id
                         ,Depth                     = TL.Depth
                         ,referenced_schema         = TL.referenced_schema
                         ,referenced_table          = TL.referenced_table
                         ,referenced_alias          = CAST(CASE WHEN LEN(R.referenced_table) > 0
                                                                    THEN R.referenced_table
                                                               ELSE UPPER(LEFT(TL.referenced_table, 1))
                                                           END + CASE WHEN CAST(ROW_NUMBER() OVER (PARTITION BY
                                                                                                       CASE WHEN LEN(R.referenced_table) > 0
                                                                                                                THEN R.referenced_table
                                                                                                           ELSE UPPER(LEFT(TL.referenced_table, 1))
                                                                                                       END
                                                                                                   ORDER BY
                                                                                                       TL.Depth ASC
                                                                                             ) AS nvarchar(MAX)) = 1
                                                                          THEN CAST(N'' AS nvarchar(MAX))
                                                                     ELSE CAST(ROW_NUMBER() OVER (PARTITION BY
                                                                                                      CASE WHEN LEN(R.referenced_table) > 0
                                                                                                               THEN R.referenced_table
                                                                                                          ELSE UPPER(LEFT(TL.referenced_table, 1))
                                                                                                      END
                                                                                                  ORDER BY
                                                                                                      TL.Depth ASC
                                                                                            ) - 1 AS nvarchar(MAX))
                                                                 END AS nvarchar(MAX))
                         ,referenced_column         = TL.referenced_column
                         ,parent_schema             = TL.parent_schema
                         ,parent_table              = TL.parent_table
                         ,parent_column             = TL.parent_column
                         ,parent_column_is_nullable = TL.parent_column_is_nullable
                         ,HierarchyPath             = TL.HierarchyPath
                      FROM
                         -- SQL Prompt formatting off
                         #TableList  AS TL 
                         CROSS APPLY (SELECT REPLACE(TL.referenced_table COLLATE Latin1_General_BIN, 'a', N'')  AS referenced_table) AS R1 /* TRANSLATE() would work with one line but is only supported in 2017+ */
                         CROSS APPLY (SELECT REPLACE(R1.referenced_table  COLLATE Latin1_General_BIN, 'b', N'')  AS referenced_table) AS R2
                         CROSS APPLY (SELECT REPLACE(R2.referenced_table  COLLATE Latin1_General_BIN, 'c', N'')  AS referenced_table) AS R3
                         CROSS APPLY (SELECT REPLACE(R3.referenced_table  COLLATE Latin1_General_BIN, 'd', N'')  AS referenced_table) AS R4
                         CROSS APPLY (SELECT REPLACE(R4.referenced_table  COLLATE Latin1_General_BIN, 'e', N'')  AS referenced_table) AS R5
                         CROSS APPLY (SELECT REPLACE(R5.referenced_table  COLLATE Latin1_General_BIN, 'f', N'')  AS referenced_table) AS R6
                         CROSS APPLY (SELECT REPLACE(R6.referenced_table  COLLATE Latin1_General_BIN, 'g', N'')  AS referenced_table) AS R7
                         CROSS APPLY (SELECT REPLACE(R7.referenced_table  COLLATE Latin1_General_BIN, 'h', N'')  AS referenced_table) AS R8
                         CROSS APPLY (SELECT REPLACE(R8.referenced_table  COLLATE Latin1_General_BIN, 'i', N'')  AS referenced_table) AS R9
                         CROSS APPLY (SELECT REPLACE(R9.referenced_table  COLLATE Latin1_General_BIN, 'j', N'')  AS referenced_table) AS R10
                         CROSS APPLY (SELECT REPLACE(R10.referenced_table COLLATE Latin1_General_BIN, 'k', N'')  AS referenced_table) AS R11
                         CROSS APPLY (SELECT REPLACE(R11.referenced_table COLLATE Latin1_General_BIN, 'l', N'')  AS referenced_table) AS R12
                         CROSS APPLY (SELECT REPLACE(R12.referenced_table COLLATE Latin1_General_BIN, 'm', N'')  AS referenced_table) AS R13
                         CROSS APPLY (SELECT REPLACE(R13.referenced_table COLLATE Latin1_General_BIN, 'n', N'')  AS referenced_table) AS R14
                         CROSS APPLY (SELECT REPLACE(R14.referenced_table COLLATE Latin1_General_BIN, 'o', N'')  AS referenced_table) AS R15
                         CROSS APPLY (SELECT REPLACE(R15.referenced_table COLLATE Latin1_General_BIN, 'p', N'')  AS referenced_table) AS R16
                         CROSS APPLY (SELECT REPLACE(R16.referenced_table COLLATE Latin1_General_BIN, 'q', N'')  AS referenced_table) AS R17
                         CROSS APPLY (SELECT REPLACE(R17.referenced_table COLLATE Latin1_General_BIN, 'r', N'')  AS referenced_table) AS R18
                         CROSS APPLY (SELECT REPLACE(R18.referenced_table COLLATE Latin1_General_BIN, 's', N'')  AS referenced_table) AS R19
                         CROSS APPLY (SELECT REPLACE(R19.referenced_table COLLATE Latin1_General_BIN, 't', N'')  AS referenced_table) AS R20
                         CROSS APPLY (SELECT REPLACE(R20.referenced_table COLLATE Latin1_General_BIN, 'u', N'')  AS referenced_table) AS R21
                         CROSS APPLY (SELECT REPLACE(R21.referenced_table COLLATE Latin1_General_BIN, 'v', N'')  AS referenced_table) AS R22
                         CROSS APPLY (SELECT REPLACE(R22.referenced_table COLLATE Latin1_General_BIN, 'w', N'')  AS referenced_table) AS R23
                         CROSS APPLY (SELECT REPLACE(R23.referenced_table COLLATE Latin1_General_BIN, 'x', N'')  AS referenced_table) AS R24
                         CROSS APPLY (SELECT REPLACE(R24.referenced_table COLLATE Latin1_General_BIN, 'y', N'')  AS referenced_table) AS R25
                         CROSS APPLY (SELECT REPLACE(R25.referenced_table COLLATE Latin1_General_BIN, 'z', N'')  AS referenced_table) AS R26
                         CROSS APPLY (SELECT REPLACE(R26.referenced_table COLLATE Latin1_General_BIN, '~', N'')  AS referenced_table) AS R27
                         CROSS APPLY (SELECT REPLACE(R27.referenced_table COLLATE Latin1_General_BIN, '`', N'')  AS referenced_table) AS R28
                         CROSS APPLY (SELECT REPLACE(R28.referenced_table COLLATE Latin1_General_BIN, '!', N'')  AS referenced_table) AS R29
                         CROSS APPLY (SELECT REPLACE(R29.referenced_table COLLATE Latin1_General_BIN, '@', N'')  AS referenced_table) AS R30
                         CROSS APPLY (SELECT REPLACE(R30.referenced_table COLLATE Latin1_General_BIN, '#', N'')  AS referenced_table) AS R31
                         CROSS APPLY (SELECT REPLACE(R31.referenced_table COLLATE Latin1_General_BIN, '$', N'')  AS referenced_table) AS R32
                         CROSS APPLY (SELECT REPLACE(R32.referenced_table COLLATE Latin1_General_BIN, '%', N'')  AS referenced_table) AS R33
                         CROSS APPLY (SELECT REPLACE(R33.referenced_table COLLATE Latin1_General_BIN, '^', N'')  AS referenced_table) AS R34
                         CROSS APPLY (SELECT REPLACE(R34.referenced_table COLLATE Latin1_General_BIN, '&', N'')  AS referenced_table) AS R35
                         CROSS APPLY (SELECT REPLACE(R35.referenced_table COLLATE Latin1_General_BIN, '*', N'')  AS referenced_table) AS R36
                         CROSS APPLY (SELECT REPLACE(R36.referenced_table COLLATE Latin1_General_BIN, '(', N'')  AS referenced_table) AS R37
                         CROSS APPLY (SELECT REPLACE(R37.referenced_table COLLATE Latin1_General_BIN, ')', N'')  AS referenced_table) AS R38
                         CROSS APPLY (SELECT REPLACE(R38.referenced_table COLLATE Latin1_General_BIN, '-', N'')  AS referenced_table) AS R39
                         CROSS APPLY (SELECT REPLACE(R39.referenced_table COLLATE Latin1_General_BIN, '_', N'')  AS referenced_table) AS R40
                         CROSS APPLY (SELECT REPLACE(R40.referenced_table COLLATE Latin1_General_BIN, '=', N'')  AS referenced_table) AS R41
                         CROSS APPLY (SELECT REPLACE(R41.referenced_table COLLATE Latin1_General_BIN, '+', N'')  AS referenced_table) AS R42
                         CROSS APPLY (SELECT REPLACE(R42.referenced_table COLLATE Latin1_General_BIN, '[', N'')  AS referenced_table) AS R43
                         CROSS APPLY (SELECT REPLACE(R43.referenced_table COLLATE Latin1_General_BIN, '{', N'')  AS referenced_table) AS R44
                         CROSS APPLY (SELECT REPLACE(R44.referenced_table COLLATE Latin1_General_BIN, ']', N'')  AS referenced_table) AS R45
                         CROSS APPLY (SELECT REPLACE(R45.referenced_table COLLATE Latin1_General_BIN, '}', N'')  AS referenced_table) AS R46
                         CROSS APPLY (SELECT REPLACE(R46.referenced_table COLLATE Latin1_General_BIN, '\', N'')  AS referenced_table) AS R47
                         CROSS APPLY (SELECT REPLACE(R47.referenced_table COLLATE Latin1_General_BIN, '|', N'')  AS referenced_table) AS R48
                         CROSS APPLY (SELECT REPLACE(R48.referenced_table COLLATE Latin1_General_BIN, ':', N'')  AS referenced_table) AS R49
                         CROSS APPLY (SELECT REPLACE(R49.referenced_table COLLATE Latin1_General_BIN, ';', N'')  AS referenced_table) AS R50
                         CROSS APPLY (SELECT REPLACE(R50.referenced_table COLLATE Latin1_General_BIN, '"', N'')  AS referenced_table) AS R51
                         CROSS APPLY (SELECT REPLACE(R51.referenced_table COLLATE Latin1_General_BIN, '/', N'')  AS referenced_table) AS R52
                         CROSS APPLY (SELECT REPLACE(R52.referenced_table COLLATE Latin1_General_BIN, '?', N'')  AS referenced_table) AS R53
                         CROSS APPLY (SELECT REPLACE(R53.referenced_table COLLATE Latin1_General_BIN, '.', N'')  AS referenced_table) AS R54
                         CROSS APPLY (SELECT REPLACE(R54.referenced_table COLLATE Latin1_General_BIN, ',', N'')  AS referenced_table) AS R55
                         CROSS APPLY (SELECT REPLACE(R55.referenced_table COLLATE Latin1_General_BIN, '>', N'')  AS referenced_table) AS R56
                         CROSS APPLY (SELECT REPLACE(R56.referenced_table COLLATE Latin1_General_BIN, '<', N'')  AS referenced_table) AS R57
                         CROSS APPLY (SELECT REPLACE(R57.referenced_table COLLATE Latin1_General_BIN, ' ', N'')  AS referenced_table) AS R58
                         CROSS APPLY (SELECT REPLACE(R58.referenced_table COLLATE Latin1_General_BIN, '''', N'') AS referenced_table) AS R 
                         -- SQL Prompt formatting on
                  )
                UPDATE
                    TL_T
                SET
                    TL_T.parent_object_id = TL_S.parent_object_id
                   ,TL_T.referenced_object_id = TL_S.referenced_object_id
                   ,TL_T.Depth = TL_S.Depth
                   ,TL_T.referenced_schema = TL_S.referenced_schema
                   ,TL_T.referenced_table = TL_S.referenced_table
                   ,TL_T.referenced_alias = TL_S.referenced_alias
                   ,TL_T.referenced_column = TL_S.referenced_column
                   ,TL_T.parent_schema = TL_S.parent_schema
                   ,TL_T.parent_table = TL_S.parent_table
                   ,TL_T.parent_column = TL_S.parent_column
                   ,TL_T.parent_column_is_nullable = TL_S.parent_column_is_nullable
                   ,TL_T.HierarchyPath = TL_S.HierarchyPath
                   ,TL_T.referenced_table_description = ISNULL(REPLACE(CAST(EP.value AS nvarchar(MAX)), N'''', N''''''), N'')
                   ,TL_T.parent_alias = (
                        SELECT TOP (1)
                            TL_S.referenced_alias
                        FROM
                            Numbering AS TL_S
                        WHERE
                            TL_T.parent_object_id = TL_S.referenced_object_id
                        AND TL_T.Depth            >= TL_S.Depth
                        ORDER BY
                            TL_S.referenced_alias ASC
                    )
                   ,TL_T.HasTriggersFlag = CASE WHEN EXISTS (
                                                         SELECT
                                                             *
                                                         FROM
                                                             sys.triggers AS TG
                                                         WHERE
                                                             TG.parent_id = TL_S.referenced_object_id
                                                     )
                                                    THEN 1
                                               ELSE 0
                                           END
                   ,TL_T.IsProcessedFlag = 0
                FROM
                    #TableList                              AS TL_T
                    INNER JOIN Numbering                    AS TL_S
                        ON TL_T.TableListId          = TL_S.TableListId
                    LEFT OUTER JOIN sys.extended_properties AS EP
                        ON TL_S.referenced_object_id = EP.major_id
                        AND EP.minor_id              = 0
                        AND EP.class                 = 1
                        AND EP.name                  = 'MS_Description';


                /* Update table list with temporal table */
                UPDATE 
                    TL
                SET
                    TL.IsTemporalFlag = 1
                FROM 
                    #TableList AS TL
                    INNER JOIN sys.tables AS T
                        ON tl.referenced_object_id = T.object_id
                WHERE 
                    T.temporal_type = 2;

                /* Forces the view to allow temporal functionality */
                IF @ForceTemporalForView = 1
                    BEGIN
                        UPDATE 
                            #TableList
                        SET
                            IsTemporalFlag = 1
                        WHERE
                            Depth = 0;                           
                    END;




                /**********************************************************************************************************************
                ** Create and load column list
                **********************************************************************************************************************/
                IF OBJECT_ID('tempdb..#ColumnList') IS NOT NULL
                    BEGIN
                        DROP TABLE #ColumnList;
                    END;
                CREATE TABLE #ColumnList (
                    ColumnListId       int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
                   ,schema_id          int           NOT NULL
                   ,Depth              int           NOT NULL
                   ,Table_object_id    int           NOT NULL
                   ,SchemaName         nvarchar(MAX) NOT NULL
                   ,TableName          nvarchar(MAX) NOT NULL
                   ,TableAlias         nvarchar(MAX) NOT NULL
                   ,column_object_id   int           NOT NULL
                   ,column_id          int           NOT NULL
                   ,ColumnName         nvarchar(MAX) NOT NULL
                   ,ColumnNameCleaned  nvarchar(MAX) NOT NULL
                   ,ColumnDescription  nvarchar(MAX) NOT NULL
                   ,IsPrimaryKeyFlag   bit           NOT NULL
                   ,IsIdentityFlag     bit           NOT NULL
                   ,IsComputedFlag     bit           NOT NULL
                   ,IsReferencedColumn bit           NOT NULL
                   ,user_type_id       int           NOT NULL
                   ,TypeName           nvarchar(MAX) NOT NULL
                   ,TypeLength         nvarchar(MAX) NOT NULL
                   ,Is_Nullable        nvarchar(MAX) NOT NULL
                   ,IsProcessedFlag    bit           NOT NULL
                );

                /* Insert column list for tables */
                INSERT INTO #ColumnList (
                    schema_id
                   ,Depth
                   ,Table_object_id
                   ,SchemaName
                   ,TableName
                   ,TableAlias
                   ,column_object_id
                   ,column_id
                   ,ColumnName
                   ,ColumnNameCleaned
                   ,ColumnDescription
                   ,IsPrimaryKeyFlag
                   ,IsIdentityFlag
                   ,IsComputedFlag
                   ,IsReferencedColumn
                   ,user_type_id
                   ,TypeName
                   ,TypeLength
                   ,Is_Nullable
                   ,IsProcessedFlag
                )
                SELECT
                    schema_id          = S.schema_id
                   ,Depth              = TL.Depth
                   ,Table_object_id    = C.object_id
                   ,SchemaName         = S.name
                   ,TableName          = T.name
                   ,TableAlias         = TL.referenced_alias
                   ,column_object_id   = C.object_id
                   ,column_id          = C.column_id
                   ,ColumnName         = C.name
                   ,ColumnNameCleaned  = REPLACE(C.name, N' ', N'')
                   ,ColumnDescription  = ISNULL(REPLACE(CAST(EP.value AS nvarchar(MAX)), N'''', N''''''), N'')
                   ,IsPrimaryKeyFlag   = CASE WHEN PK.object_id IS NOT NULL THEN 1 ELSE 0 END
                   ,IsIdentityFlag     = C.is_identity
                   ,IsComputedFlag     = C.is_computed
                   ,IsReferencedColumn = CASE WHEN EXISTS (
                                                       SELECT
                                                           *
                                                       FROM
                                                           #TableList AS TLSub
                                                       WHERE
                                                           TLSub.referenced_schema = S.name
                                                       AND TLSub.referenced_table  = T.name
                                                       AND TLSub.parent_column     = C.name
                                                   )
                                                  THEN 1
                                             ELSE 0
                                         END
                   ,user_type_id       = C.user_type_id
                   ,TypeName           = CASE WHEN TP.name = 'timestamp' THEN 'rowversion' ELSE TP.name END
                   ,TypeLength         =
                   /* decimal, numeric */
                   CASE WHEN C.user_type_id IN (106, 108)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.precision AS varchar(3)) + CAST(N', ' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* datetime2, datetimeoffset, time */
                   CASE WHEN C.user_type_id IN (41, 42, 43)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* varbinary, binary, varchar, char */
                   CASE WHEN C.user_type_id IN (165, 167, 173, 175)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* nvarchar, nchar */
                   CASE WHEN C.user_type_id IN (231, 239)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length / 2 AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END
                   ,Is_Nullable        = CAST(CASE WHEN C.is_nullable = 1
                                                       THEN CAST(N'NULL' AS nvarchar(MAX))
                                                  ELSE CAST(N'NOT NULL' AS nvarchar(MAX))
                                              END AS nvarchar(MAX))
                   ,IsProcessedFlag    = 0
                FROM
                    sys.columns                             AS C
                    INNER JOIN sys.tables                   AS T
                        ON C.object_id     = T.object_id
                    INNER JOIN sys.schemas                  AS S
                        ON T.schema_id     = S.schema_id
                    INNER JOIN sys.objects                  AS SO
                        ON SO.object_id    = C.object_id
                    INNER JOIN sys.types                    AS TP
                        ON TP.user_type_id = C.user_type_id
                    INNER JOIN #TableList                   AS TL
                        ON C.object_id     = TL.referenced_object_id
                    LEFT OUTER JOIN sys.extended_properties AS EP
                        ON C.object_id     = EP.major_id
                        AND C.column_id    = EP.minor_id
                        AND EP.class       = 1
                        AND EP.name        = 'MS_Description'
                    LEFT OUTER JOIN (
                        SELECT
                            C.object_id
                           ,C.column_id
                        FROM
                            sys.indexes                  AS I
                            INNER JOIN sys.index_columns AS IC
                                ON I.object_id  = IC.object_id
                                AND I.index_id  = IC.index_id
                            INNER JOIN sys.columns       AS C
                                ON IC.object_id = C.object_id
                                AND C.column_id = IC.column_id
                        WHERE
                            I.is_primary_key = 1
                    )                                       AS PK
                        ON C.object_id     = PK.object_id
                        AND C.column_id    = PK.column_id
                WHERE
                    SO.type = 'U'
                ORDER BY
                    TL.TableListId ASC
                   ,C.column_id ASC
                OPTION (RECOMPILE);

                /* Insert column list for view */
                INSERT INTO #ColumnList (
                    schema_id
                   ,Depth
                   ,Table_object_id
                   ,SchemaName
                   ,TableName
                   ,TableAlias
                   ,column_object_id
                   ,column_id
                   ,ColumnName
                   ,ColumnNameCleaned
                   ,ColumnDescription
                   ,IsPrimaryKeyFlag
                   ,IsIdentityFlag
                   ,IsComputedFlag
                   ,IsReferencedColumn
                   ,user_type_id
                   ,TypeName
                   ,TypeLength
                   ,Is_Nullable
                   ,IsProcessedFlag
                )
                SELECT
                    schema_id          = S.schema_id
                   ,Depth              = TL.Depth
                   ,Table_object_id    = C.object_id
                   ,SchemaName         = S.name
                   ,TableName          = T.name
                   ,TableAlias         = TL.referenced_alias
                   ,column_object_id   = C.object_id
                   ,column_id          = C.column_id
                   ,ColumnName         = C.name
                   ,ColumnNameCleaned  = REPLACE(C.name, N' ', N'')
                   ,ColumnDescription  = ISNULL(REPLACE(CAST(EP.value AS nvarchar(MAX)), N'''', N''''''), N'')
                   ,IsPrimaryKeyFlag   = CASE WHEN PK.object_id IS NOT NULL THEN 1 ELSE 0 END
                   ,IsIdentityFlag     = C.is_identity
                   ,IsComputedFlag     = C.is_computed
                   ,IsReferencedColumn = CASE WHEN EXISTS (
                                                       SELECT
                                                           *
                                                       FROM
                                                           #TableList AS TLSub
                                                       WHERE
                                                           TLSub.referenced_schema = S.name
                                                       AND TLSub.referenced_table  = T.name
                                                       AND TLSub.parent_column     = C.name
                                                   )
                                                  THEN 1
                                             ELSE 0
                                         END
                   ,user_type_id       = C.user_type_id
                   ,TypeName           = CASE WHEN TP.name = 'timestamp' THEN 'rowversion' ELSE TP.name END
                   ,TypeLength         =
                   /* decimal, numeric */
                   CASE WHEN C.user_type_id IN (106, 108)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.precision AS varchar(3)) + CAST(N', ' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* datetime2, datetimeoffset, time */
                   CASE WHEN C.user_type_id IN (41, 42, 43)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* varbinary, binary, varchar, char */
                   CASE WHEN C.user_type_id IN (165, 167, 173, 175)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* nvarchar, nchar */
                   CASE WHEN C.user_type_id IN (231, 239)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length / 2 AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END
                   ,Is_Nullable        = CAST(CASE WHEN C.is_nullable = 1
                                                       THEN CAST(N'NULL' AS nvarchar(MAX))
                                                  ELSE CAST(N'NOT NULL' AS nvarchar(MAX))
                                              END AS nvarchar(MAX))
                   ,IsProcessedFlag    = 0
                FROM
                    sys.columns                             AS C
                    INNER JOIN sys.views                    AS T
                        ON C.object_id     = T.object_id
                    INNER JOIN sys.schemas                  AS S
                        ON T.schema_id     = S.schema_id
                    INNER JOIN sys.objects                  AS SO
                        ON SO.object_id    = C.object_id
                    INNER JOIN sys.types                    AS TP
                        ON TP.user_type_id = C.user_type_id
                    INNER JOIN #TableList                   AS TL
                        ON C.object_id     = TL.referenced_object_id
                    LEFT OUTER JOIN sys.extended_properties AS EP
                        ON C.object_id     = EP.major_id
                        AND C.column_id    = EP.minor_id
                        AND EP.class       = 1
                        AND EP.name        = 'MS_Description'
                    LEFT OUTER JOIN (
                        SELECT
                            C.object_id
                           ,C.column_id
                        FROM
                            sys.indexes                  AS I
                            INNER JOIN sys.index_columns AS IC
                                ON I.object_id  = IC.object_id
                                AND I.index_id  = IC.index_id
                            INNER JOIN sys.columns       AS C
                                ON IC.object_id = C.object_id
                                AND C.column_id = IC.column_id
                        WHERE
                            I.is_primary_key = 1
                    )                                       AS PK
                        ON C.object_id     = PK.object_id
                        AND C.column_id    = PK.column_id
                WHERE
                    SO.type = 'V'
                ORDER BY
                    TL.TableListId ASC
                   ,C.column_id ASC
                OPTION (RECOMPILE);

                /* Find duplicate column names and add the table alias */
                UPDATE
                    #ColumnList
                SET
                    ColumnNameCleaned = ColumnNameCleaned + TableAlias
                WHERE
                    EXISTS (
                    SELECT
                        CL.ColumnName
                    FROM
                        #ColumnList AS CL
                    WHERE
                        CL.ColumnName     = #ColumnList.ColumnName
                    AND #ColumnList.Depth > 0
                    GROUP BY
                        CL.ColumnName
                    HAVING
                        COUNT(*) > 1
                );

                /* Determine if the there is a datetimeoffset so we can create the @AtTimeZoneName parameter */
                DECLARE @HasDateTimeOffsetFlag bit;

                IF EXISTS (SELECT * FROM #ColumnList AS CL WHERE CL.TypeName = 'datetimeoffset')
                    BEGIN
                        SET @HasDateTimeOffsetFlag = 1;
                    END;
                ELSE
                    BEGIN
                        SET @HasDateTimeOffsetFlag = 0;
                    END;

                /**********************************************************************************************************************
                ** Build column list for the output temporary table
                **********************************************************************************************************************/
                IF @ProcedureType IN (N'Create', N'CreateMultiple', N'Update', N'UpdateMultiple', N'Upsert', N'Indate')
                    BEGIN
                        SELECT
                            @TemporaryTableOutputStringColumnType = @TemporaryTableOutputStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + REPLACE(CL.TypeName, 'rowversion', 'nvarchar(20)') + CL.TypeLength + N' NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                       THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                  ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                              END
                           ,@TemporaryTableOutputStringType       = @TemporaryTableOutputStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                          END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryTableOutputStringColumnType) > 0
                            BEGIN
                                SET @TemporaryTableOutputStringColumnType = RIGHT(@TemporaryTableOutputStringColumnType, LEN(@TemporaryTableOutputStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryTableOutputStringType) > 0
                            BEGIN
                                SET @TemporaryTableOutputStringType = RIGHT(@TemporaryTableOutputStringType, LEN(@TemporaryTableOutputStringType) - 22);
                            END;
                            
                    END;


                IF @ProcedureType IN (N'Create', N'CreateMultiple', N'Update', N'Upsert', N'Indate')
                    BEGIN
                        SELECT
                            @TemporaryTableStringColumnType = @TemporaryTableStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + REPLACE(CL.TypeName, 'rowversion', 'nvarchar(20)') + CL.TypeLength + N' NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                           THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                      ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                  END
                           ,@TemporaryTableStringType       = @TemporaryTableStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                       THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                  ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                              END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryTableStringColumnType = RIGHT(@TemporaryTableStringColumnType, LEN(@TemporaryTableStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryTableStringType) > 0
                            BEGIN
                                SET @TemporaryTableStringType = RIGHT(@TemporaryTableStringType, LEN(@TemporaryTableStringType) - 22);
                            END;

                    END;


                IF @ProcedureType IN (N'UpdateMultiple')
                    BEGIN
                        SELECT
                            @TemporaryTableStringColumnType = @TemporaryTableStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + REPLACE(CL.TypeName, 'rowversion', 'nvarchar(20)') + CL.TypeLength + N' NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                           THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                      ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                  END
                           ,@TemporaryTableStringType       = @TemporaryTableStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                       THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                  ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                              END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryTableStringColumnType = RIGHT(@TemporaryTableStringColumnType, LEN(@TemporaryTableStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryTableStringType) > 0
                            BEGIN
                                SET @TemporaryTableStringType = RIGHT(@TemporaryTableStringType, LEN(@TemporaryTableStringType) - 22);
                            END;

                    END;


                IF @ProcedureType IN (N'Update', N'Upsert', N'Indate')
                    BEGIN
                        SELECT
                            @TemporaryJSONTableStringColumnType = @TemporaryJSONTableStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + REPLACE(CL.TypeName, 'rowversion', 'nvarchar(20)') + CL.TypeLength + N' NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                          END
                           ,@TemporaryJSONTableStringType       = @TemporaryJSONTableStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                               THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                          ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                      END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        AND CL.ColumnName NOT IN (@TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryJSONTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryJSONTableStringColumnType = RIGHT(@TemporaryJSONTableStringColumnType, LEN(@TemporaryJSONTableStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryJSONTableStringType) > 0
                            BEGIN
                                SET @TemporaryJSONTableStringType = RIGHT(@TemporaryJSONTableStringType, LEN(@TemporaryJSONTableStringType) - 22);
                            END;

                    END;

                IF @ProcedureType IN (N'Create', N'UpdateMultiple', N'CreateMultiple')
                    BEGIN
                        SELECT
                            @TemporaryJSONTableStringColumnType = @TemporaryJSONTableStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + REPLACE(CL.TypeName, 'rowversion', 'nvarchar(20)') + CL.TypeLength + N' NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                          END

                           ,@TemporaryJSONTableStringType       = @TemporaryJSONTableStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                               THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                          ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                      END


                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        AND CL.ColumnName NOT IN (@RowUpdatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryJSONTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryJSONTableStringColumnType = RIGHT(@TemporaryJSONTableStringColumnType, LEN(@TemporaryJSONTableStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryJSONTableStringType) > 0
                            BEGIN
                                SET @TemporaryJSONTableStringType = RIGHT(@TemporaryJSONTableStringType, LEN(@TemporaryJSONTableStringType) - 22);
                            END;

                    END;


                /* Build the OPENJSONWithCreateString */
                SELECT
                    @OPENJSONWithCreateString = @OPENJSONWithCreateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                     THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                            END
                FROM
                    #ColumnList AS CL
                WHERE
                    CL.Depth = 0
                AND CL.ColumnName NOT IN (@RowUpdatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                ORDER BY
                    CL.ColumnListId ASC;
                    
                IF LEN(@OPENJSONWithCreateString) > 0
                    BEGIN
                        SET @OPENJSONWithCreateString = RIGHT(@OPENJSONWithCreateString, LEN(@OPENJSONWithCreateString) - 22);
                    END;                    

                /* Build the OPENJSONWithUpdateString */
                SELECT
                    @OPENJSONWithUpdateString = @OPENJSONWithUpdateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                     THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                            END
                FROM
                    #ColumnList AS CL
                WHERE
                    CL.Depth = 0
                AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                ORDER BY
                    CL.ColumnListId ASC;

                IF LEN(@OPENJSONWithUpdateString) > 0
                    BEGIN
                        SET @OPENJSONWithUpdateString = RIGHT(@OPENJSONWithUpdateString, LEN(@OPENJSONWithUpdateString) - 22);
                    END;


                IF @ProcedureType IN (N'Create', N'CreateMultiple', N'Update', N'UpdateMultiple', N'Upsert', N'Indate')
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the OUTPUT clause
                        **********************************************************************************************************************/
                        SELECT
                            @OutputString = @OutputString + @NewLineString + N'/*[INDENT SPACES]*/,Inserted.' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                  THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                             ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                         END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;
                            
                        /* Fix the first item */
                        IF LEN(@OutputString) > 0
                            BEGIN
                                SET @OutputString = RIGHT(@OutputString, LEN(@OutputString) - 22);
                            END;

                    END;


                /**********************************************************************************************************************
                ** Build the FROM clause
                **********************************************************************************************************************/
                WHILE EXISTS (SELECT * FROM #TableList AS TL WHERE TL.IsProcessedFlag = 0)
                    BEGIN
                        /**********************************************************************************************************************
                        ** Set the variables to the next unprocessed row
                        **********************************************************************************************************************/
                        SELECT TOP (1)
                            @TableListId                  = TL.TableListId
                           ,@Depth                        = TL.Depth
                           ,@parent_object_id             = TL.parent_object_id
                           ,@referenced_object_id         = TL.referenced_object_id
                           ,@referenced_schema            = TL.referenced_schema
                           ,@referenced_table             = TL.referenced_table
                           ,@referenced_table_description = TL.referenced_table_description
                           ,@referenced_alias             = TL.referenced_alias
                           ,@referenced_column            = TL.referenced_column
                           ,@parent_schema                = TL.parent_schema
                           ,@parent_table                 = TL.parent_table
                           ,@parent_alias                 = TL.parent_alias
                           ,@parent_column                = TL.parent_column
                           ,@parent_column_is_nullable    = TL.parent_column_is_nullable
                           ,@HasTriggersFlag              = TL.HasTriggersFlag
                           ,@IsTemporalTableTableFlag     = TL.IsTemporalFlag
                        FROM
                            #TableList AS TL
                        WHERE
                            TL.IsProcessedFlag = 0
                        ORDER BY
                            TL.Depth ASC
                        OPTION (RECOMPILE);

                        /**********************************************************************************************************************
                        ** Build the TableListInsertValuesString variable
                        **********************************************************************************************************************/
                        SET @TableListInsertValuesString = @TableListInsertValuesString + @NewLineString + N'/*[INDENT SPACES]*/,(N''' + @referenced_schema + N''', N''' + @referenced_table + N''', N''' + @referenced_alias + N''')';

                        /**********************************************************************************************************************
                        ** Check if child table also needs to be a LEFT OUTER JOIN
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #TableList AS TL
                            WHERE
                                TL.referenced_object_id      = @parent_object_id
                            AND TL.parent_column_is_nullable = 1
                        )
                            BEGIN
                                UPDATE
                                    #TableList
                                SET
                                    parent_column_is_nullable = 1
                                WHERE
                                    TableListId = @TableListId;

                                SET @parent_column_is_nullable = 1;
                            END;


                        /**********************************************************************************************************************
                        ** Check for INNER JOIN or LEFT OUTER JOIN
                        **********************************************************************************************************************/
                        IF @Depth > 0
                            BEGIN
                                IF @parent_column_is_nullable = 1
                                    BEGIN
                                        SET @FromString = @FromString + @NewLineString + N'/*[INDENT SPACES]*/LEFT OUTER JOIN ';
                                    END;
                                ELSE
                                    BEGIN
                                        SET @FromString = @FromString + @NewLineString + N'/*[INDENT SPACES]*/INNER JOIN ';
                                    END;
                            END;


                        /**********************************************************************************************************************
                        ** Check for JOIN condition
                        **********************************************************************************************************************/
                        IF @Depth = 0
                            BEGIN
                                SET @FromString = @FromString + QUOTENAME(@referenced_schema) + N'.' + QUOTENAME(@referenced_table) + CASE WHEN @IsTemporalTableTableFlag = 1 THEN N'/*[TEMPORAL TABLE CLAUSE]*/' ELSE N'' END

                                                  + N' AS ' + QUOTENAME(@referenced_alias) + N'/*[JOIN CONDITION]*/' + CASE WHEN LEN(@referenced_table_description) > 0
                                                                                                                                THEN N' /* ' + @referenced_table_description + N' */'
                                                                                                                           ELSE N''
                                                                                                                       END;
                            END;
                        ELSE IF @Depth > 0
                            BEGIN
                                SET @FromString = @FromString + QUOTENAME(@referenced_schema) + N'.' + QUOTENAME(@referenced_table) + CASE WHEN @IsTemporalTableTableFlag = 1 THEN N'/*[TEMPORAL TABLE CLAUSE]*/' ELSE N'' END + N' AS ' + QUOTENAME(@referenced_alias) + CASE WHEN LEN(@referenced_table_description) > 0
                                                                                                                                                                                                                                                                                   THEN N' /* ' + @referenced_table_description + N' */'
                                                                                                                                                                                                                                                                              ELSE N''
                                                                                                                                                                                                                                                                          END;
                                SET @FromString = @FromString + @NewLineString + N'/*[ON SPACE]*/ON ' + QUOTENAME(@parent_alias) + N'.' + QUOTENAME(@parent_column) + N' = ' + QUOTENAME(@referenced_alias) + N'.' + QUOTENAME(@referenced_column);
                            END;


                        /**********************************************************************************************************************
                        ** Save these varibles for the next loop to check
                        **********************************************************************************************************************/
                        SET @last_parent_object_id = @parent_object_id;
                        SET @last_referenced_object_id = @referenced_object_id;
                        SET @last_referenced_alias = @referenced_alias;


                        /**********************************************************************************************************************
                        ** Mark this table row as processed
                        **********************************************************************************************************************/
                        UPDATE #TableList SET IsProcessedFlag = 1 WHERE TableListId = @TableListId
                        OPTION (RECOMPILE);

                    END;

                /**********************************************************************************************************************
                ** Drop stored procedure
                **********************************************************************************************************************/
                SET @ExecuteDropString = N'IF OBJECT_ID(''' + @SchemaName + CAST(N'.' AS nvarchar(MAX)) + @ProcedureName + N''') IS NOT NULL
    BEGIN
        DROP PROCEDURE '                 + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@ProcedureName) + N';
    END;'       ;

                IF @GenerateStoredProcedures = 1
                    BEGIN
                        EXEC sys.sp_executesql @stmt = @ExecuteDropString;
                    END;


                /**********************************************************************************************************************
                ** Create stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Create'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + N' = NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                     THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                            END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowUpdatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause 
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + CASE CL.ColumnName
                                                                                                     WHEN @RowUpdatePersonColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,@' + @RowCreatePersonColumnName /* This puts the create user in the update user column */
                                                                                                     WHEN @RowUpdateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowUpdateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     WHEN @RowCreateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowCreateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     ELSE N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                          END
                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteCreateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to insert a single row into the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteCreateString = @ExecuteCreateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteCreateString = @ExecuteCreateString + N'
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'            ') + N'
        );

        /* Perform the create (insert) */
        INSERT INTO '                              + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
                '       AS nvarchar(MAX))          + REPLACE(@InsertIntoString, N'/*[INDENT SPACES]*/', N'               ') + N'
        )
        OUTPUT
                '                                  + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'               ') + N'
        INTO #Output (
                '                                  + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'               ') + N'
        )
        VALUES (
                '                                  + REPLACE(@InsertIntoValuesString, N'/*[INDENT SPACES]*/', N'               ') + N'
        );

        /* Select the inserted row from the output temporary table to return */
        SELECT
             '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'            ') + N'
        FROM
            #Output;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteCreateString;
                            END;

                    END;


                /**********************************************************************************************************************
                ** Create Multiple stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'CreateMultiple'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause 
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString       = @InsertIntoString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                       THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                  ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                              END
                           ,@InsertIntoSelectString = @InsertIntoSelectString + @NewLineString + CASE CL.ColumnName
                                                                                                     WHEN @RowUpdatePersonColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + QUOTENAME(@RowCreatePersonColumnName)
                                                                                                     WHEN @RowUpdateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowUpdateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     WHEN @RowCreateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowCreateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     ELSE N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                      THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                 ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                             END
                                                                                                 END

                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 22);
                            END;

                        IF LEN(@InsertIntoSelectString) > 0
                            BEGIN
                                SET @InsertIntoSelectString = RIGHT(@InsertIntoSelectString, LEN(@InsertIntoSelectString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteCreateMultipleString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to insert multiple rows into the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**
** Parameters:  @JSON: You can serialize and pass in a JSON string parameter to insert multiple rows at once. Format 
**                      your JSON string as an array []. The example below is for a table with two columns named 
**                      FirstName and LastName. Only a single table insert is supported with this stored procedure.
**                      https://kevinmartin.tech/go/serialize-json
**
**                      JSON Example
**                      [
**                          {
**                          "FirstName": "Nicole",
**                          "LastName": "Bartlett"
**                          },
**                          {
**                          "FirstName": "Kevin",
**                          "LastName": "Martin"
**                          }
**                      ]
**
** Notes:       It is possible to create a stored procedure to accept JSON that includes multiple objects that inserts
                  into multiple tables, just not with this generator tool.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName) + N'(
    @JSON nvarchar(MAX)
)
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        IF ISJSON(@JSON) = 1
            BEGIN
                /* Create temporary table to store the output */
                CREATE TABLE #Output (
                     ' + REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                );

                /* Create temporary table to store the JSON rows */
                CREATE TABLE #JSON (
                     ' + REPLACE(@TemporaryJSONTableStringColumnType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                );

                /* Insert into temporary table to store the JSON rows */
                INSERT INTO #JSON (
                     ' + REPLACE(@TemporaryJSONTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                SELECT
                     ' + REPLACE(@TemporaryJSONTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                FROM 
                    OPENJSON(@JSON)
                        WITH(
                             ' + REPLACE(@OPENJSONWithCreateString, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        );

                /* Perform the create (insert) */
                INSERT INTO ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + N' (
                        ' + REPLACE(@InsertIntoString, N'/*[INDENT SPACES]*/', N'                       ') + N'
                )
                OUTPUT
                        ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                       ') + N'
                INTO #Output (
                        ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                       ') + N'
                )
                SELECT
                        ' + REPLACE(@InsertIntoSelectString, N'/*[INDENT SPACES]*/', N'                       ') + N'
                FROM
                    #JSON AS [#JSON];

                /* Select the inserted row from the output temporary table to return */
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                FROM
                    #Output;
            END;
        ELSE
            BEGIN
                ;THROW 52001, ''JSON is not valid!'', 1;
                /* Use RAISERROR below if you do not need a hard error thrown.
                RAISERROR(N''JSON is not valid!'', 1, 1) WITH NOWAIT;
                RETURN -1;*/
            END;
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteCreateMultipleString;
                            END;

                    END;


                /**********************************************************************************************************************
                ** Read stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Read'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(QUOTENAME(CL.TableAlias) AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                           THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                      ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                  END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 22);
                            END;

                        /* Find the referenced alias */
                        SELECT
                            @referenced_alias = TL.referenced_alias
                        FROM
                            #TableList AS TL
                        WHERE
                            TL.Depth = 0;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.TableAlias) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                  THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                             ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                         END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteReadString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to read a single row from the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                        OR @HasDateTimeOffsetFlag = 1
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N' (';
                            END;

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N'
    '                                                    + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ');
                            END;

                        IF @HasDateTimeOffsetFlag = 1
                            BEGIN
                                IF LEN(@ParameterString) > 0
                                    BEGIN
                                        SET @ExecuteReadString = @ExecuteReadString + N',';
                                    END;

                                SET @ExecuteReadString = @ExecuteReadString + N'
    @AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */';
                            END;

                        IF LEN(@ParameterString) > 0
                        OR @HasDateTimeOffsetFlag = 1
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N'
)'                              ;
                            END;

                        SET @ExecuteReadString = @ExecuteReadString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        SELECT
             '                                   + REPLACE(@SelectString, N'/*[INDENT SPACES]*/', N'            ') + N'
        FROM
            '                                    + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + CAST(N' AS ' AS nvarchar(MAX)) + QUOTENAME(@referenced_alias) + CASE WHEN LEN(@TableDescription) > 0 THEN N' /* ' + @TableDescription + N' */' ELSE N'' END;

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N'
        WHERE
            '                                            + REPLACE(@WhereString, N'/*[INDENT SPACES]*/', N'            ');
                            END;

                        SET @ExecuteReadString = @ExecuteReadString + N'

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteReadString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** ReadEager stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'ReadEager'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(QUOTENAME(CL.TableAlias) AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                           THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                      ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                  END
                        FROM
                            #ColumnList AS CL
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.TableAlias) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteReadEagerString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to read a single row from the ' + @SchemaName + N'.' + @TableName + N' table and joined tables. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                        OR @HasDateTimeOffsetFlag = 1
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N' (';
                            END;

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
    '                                                         + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ');
                            END;

                        IF @HasDateTimeOffsetFlag = 1
                            BEGIN
                                IF LEN(@ParameterString) > 0
                                    BEGIN
                                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N',';
                                    END;

                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
    @AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */';
                            END;

                        IF LEN(@ParameterString) > 0
                        OR @HasDateTimeOffsetFlag = 1
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
)'                              ;
                            END;

                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        SELECT
             '                                        + REPLACE(@SelectString, N'/*[INDENT SPACES]*/', N'            ') + N'
        FROM
            '                                         + REPLACE(REPLACE(REPLACE(REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N''), '/*[JOIN CONDITION]*/', ''), N'/*[ON SPACE]*/', N'                '), N'/*[INDENT SPACES]*/', N'            ');

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
        WHERE
            '                                                 + @WhereString;
                            END;

                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'

    END;'               ;



                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteReadEagerString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Update procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Update'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + N' = NULL' + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                     THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                            END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowCreateTimeColumnName, @RowUpdateTimeColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CASE CL.ColumnName
                                                                                                                                             WHEN @RowUpdateTimeColumnName
                                                                                                                                                 THEN CASE @RowUpdateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             WHEN @RowCreateTimeColumnName
                                                                                                                                                 THEN CASE @RowCreateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             ELSE N'@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                END

                                                                                                                                         END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                           ,@JoinString  = @JoinString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + CAST(N' = J.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                               THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                          ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                      END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth             = 0
                        AND (CL.IsPrimaryKeyFlag = 1 OR CL.ColumnName = @RowVersionStampColumnName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;

                        IF LEN(@JoinString) > 0
                            BEGIN
                                SET @JoinString = RIGHT(@JoinString, LEN(@JoinString) - 25);
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteUpdateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update a single row in the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteUpdateString = @ExecuteUpdateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteUpdateString = @ExecuteUpdateString + N'
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'            ') + N'
        );

        /* Perform the update */
        UPDATE
            '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
        SET
             '                                     + REPLACE(@UpdateString, N'/*[INDENT SPACES]*/', N'            ') + N'
        OUTPUT
             '                                     + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'            ') + N'
        INTO #Output (
             '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'            ') + N'
        )
        WHERE
            '                                      + REPLACE(@WhereString, N'/*[INDENT SPACES]*/', N'            ') + N';' + CASE WHEN CHARINDEX(@RowVersionStampColumnName, @WhereString, 0) > 0
                                                                                                                                    THEN N'

        IF @@ROWCOUNT = 0
            BEGIN
                ;THROW 52001, ''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1;
                /* Use RAISERROR below if you do not need a hard error thrown.
                RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                RETURN -1;*/
            END;'
                                                                                                                               ELSE N''
                                                                                                                           END + N'

        /* Select the inserted row from the output temporary table to return */
        SELECT
             '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'            ') + N'
        FROM
            #Output;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteUpdateString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Update Multiple procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'UpdateMultiple'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString     = @UpdateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                              THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                         ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                     END
                           ,@UpdateJSONString = @UpdateJSONString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CASE CL.ColumnName
                                                                                                                                                     WHEN @RowUpdateTimeColumnName
                                                                                                                                                         THEN CASE @RowUpdateTimeFunction
                                                                                                                                                                  WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                                      THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                                  WHEN 'SYSUTCDATETIME()'
                                                                                                                                                                      THEN N'SYSUTCDATETIME()'
                                                                                                                                                                  WHEN 'SYSDATETIME()'
                                                                                                                                                                      THEN N'SYSDATETIME()'
                                                                                                                                                                  WHEN 'GETUTCDATE()'
                                                                                                                                                                      THEN N'GETUTCDATE()'
                                                                                                                                                                  WHEN 'GETDATE()'
                                                                                                                                                                      THEN N'GETDATE()'
                                                                                                                                                                  WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                                      THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                                  ELSE N'SYSDATETIME()'
                                                                                                                                                              END
                                                                                                                                                     WHEN @RowCreateTimeColumnName
                                                                                                                                                         THEN CASE @RowCreateTimeFunction
                                                                                                                                                                  WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                                      THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                                  WHEN 'SYSUTCDATETIME()'
                                                                                                                                                                      THEN N'SYSUTCDATETIME()'
                                                                                                                                                                  WHEN 'SYSDATETIME()'
                                                                                                                                                                      THEN N'SYSDATETIME()'
                                                                                                                                                                  WHEN 'GETUTCDATE()'
                                                                                                                                                                      THEN N'GETUTCDATE()'
                                                                                                                                                                  WHEN 'GETDATE()'
                                                                                                                                                                      THEN N'GETDATE()'
                                                                                                                                                                  WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                                      THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                                  ELSE N'SYSDATETIME()'
                                                                                                                                                              END
                                                                                                                                                     ELSE N'[#JSON].' + QUOTENAME(CL.ColumnNameCleaned) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                          END

                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 22);
                            END;

                        IF LEN(@UpdateJSONString) > 0
                            BEGIN
                                SET @UpdateJSONString = RIGHT(@UpdateJSONString, LEN(@UpdateJSONString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                           ,@JoinString  = @JoinString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + CAST(N' = [#JSON].' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                     THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                            END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth             = 0
                        AND (CL.IsPrimaryKeyFlag = 1 OR CL.ColumnName = @RowVersionStampColumnName)
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;
 
                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;

                        IF LEN(@JoinString) > 0
                            BEGIN
                                SET @JoinString = RIGHT(@JoinString, LEN(@JoinString) - 25);
                            END;


                        /**********************************************************************************************************************
                        ** Find the table alias
                        **********************************************************************************************************************/
                        SELECT TOP (1)
                            @TableAlias = TL.referenced_alias
                        FROM
                            #TableList AS TL
                        WHERE
                            TL.referenced_table  = @TableName
                        AND TL.referenced_schema = @SchemaName
                        ORDER BY
                            TL.TableListId ASC;

                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteUpdateMultipleString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update multiple rows in the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**
** Parameters:  @JSON: You can serialize and pass in a JSON string parameter to update multiple rows at once. Format 
**                      your JSON string as an array []. The example below is for a table with two columns named 
**                      FirstName and LastName. Only a single table insert is supported with this stored procedure.
**                      https://kevinmartin.tech/go/serialize-json
**
**                      JSON Example
**                      [
**                          {
**                          "FirstName": "Nicole",
**                          "LastName": "Bartlett"
**                          },
**                          {
**                          "FirstName": "Kevin",
**                          "LastName": "Martin"
**                          }
**                      ]
**
** Notes:       It is possible to create a stored procedure to accept JSON that includes multiple objects that updates
                  into multiple tables, just not with this generator tool.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName) + N' (
    @JSON nvarchar(MAX)
)
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             ' +        REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'            ') + N'
        );

        IF ISJSON(@JSON) = 1
            BEGIN
                /* Create temporary table to store the JSON rows */
                CREATE TABLE #JSON (
                     ' + REPLACE(@TemporaryTableStringColumnType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                );

                /* Insert into temporary table to store the JSON rows */
                INSERT INTO #JSON (
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                FROM 
                    OPENJSON(@JSON)
                        WITH(
                             ' + REPLACE(@OPENJSONWithUpdateString, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        );

                /* Perform the update */
                UPDATE
                    ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     ' + REPLACE(@UpdateJSONString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                OUTPUT
                     ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                    ') + N'
                INTO #Output (
                     ' + REPLACE(@TemporaryTableOutputStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                FROM
                    ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + N' AS ' + QUOTENAME(@TableAlias) + N'
                    INNER JOIN #JSON AS [#JSON]
                        ON ' + CASE WHEN LEN(@JoinString) = 0
                                        THEN N'1 = 0 /* Primary key not found */'
                                   ELSE REPLACE(@JoinString, N'/*[INDENT SPACES]*/', N'                           ')
                               END + N';
            END
        ELSE
            BEGIN
                ;THROW 52001, ''JSON is not valid!'', 1;
                /* Use RAISERROR below if you do not need a hard error thrown.
                RAISERROR(N''JSON is not valid!'', 1, 1) WITH NOWAIT;
                RETURN -1;*/
            END;


        /* Select the inserted row from the output temporary table to return */
        SELECT
             ' +        REPLACE(@TemporaryTableOutputStringType, N'/*[INDENT SPACES]*/', N'            ') + N'
        FROM
            #Output;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteUpdateMultipleString;
                            END;
                    END;




                /**********************************************************************************************************************
                ** Create Upsert (Update/Insert) procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Upsert'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CASE CL.ColumnName
                                                                                                                                             WHEN @RowUpdateTimeColumnName
                                                                                                                                                 THEN CASE @RowUpdateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             WHEN @RowCreateTimeColumnName
                                                                                                                                                 THEN CASE @RowCreateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             ELSE N'@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                END
                                                                                                                                         END


                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Check for RowVersionStamp to include or exclude optimistic concurrency
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #ColumnList AS CL
                            WHERE
                                CL.ColumnName = @RowVersionStampColumnName
                            AND CL.Depth      = 0
                        )
                            BEGIN
                                SET @HasRowVersionStampFlag = 1;
                            END;
                        ELSE
                            BEGIN
                                SET @HasRowVersionStampFlag = 0;
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + CASE CL.ColumnName
                                                                                                     WHEN @RowCreatePersonColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,@' + @RowUpdatePersonColumnName
                                                                                                     ELSE N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                          END
                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowUpdateTimeColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 0
                        AND CL.IsComputedFlag   = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowUpdatePersonColumnName, @RowCreatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteUpsertString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update or insert a single row in the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**
** Notes:       If your table includes the column RowVersionStamp optimistic concurrency T-SQL code will be generated.
**              Consider using the Indate (Insert/Update) stored procedure if you expect more inserts than updates.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;
        
        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'            ') + N'
        );
'                       ;
                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N'
        IF @'                                              + @RowVersionStampColumnName + N' IS NOT NULL
            BEGIN
                UPDATE
                    '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     '                                     + REPLACE(@UpdateString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                OUTPUT
                     '                                     + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                    ') + N'
                INTO #Output (
                     '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                WHERE
                    '                                      + REPLACE(@WhereString, N'/*[INDENT SPACES]*/', N'                ') + N';' + CASE WHEN CHARINDEX(@RowVersionStampColumnName, @WhereString, 0) > 0
                                                                                                                                                THEN N'

                IF @@ROWCOUNT = 0
                    BEGIN
                        ;THROW 52001, ''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1;
                        /* Use RAISERROR below if you do not need a hard error thrown.
                        RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                        RETURN -1;*/
                    END
                ELSE
                    BEGIN
                        /* Select the inserted row from the output temporary table to return */
                        SELECT
                             ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        FROM
                            #Output;
                    END;'
                                                                                                                                           ELSE N''
                                                                                                                                       END + N'
            END;
        ELSE
            BEGIN'              ;
                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + REPLACE(N'
                UPDATE
                    ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     ' + REPLACE(@UpdateString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                OUTPUT
                     ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                    ') + N'
                INTO #Output (
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                WHERE
                    ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*[INDENT SPACES]*/AND [' + @RowVersionStampColumnName + '] = @' + @RowVersionStampColumnName + '', N''), N'/*[INDENT SPACES]*/', N'                ') + N';

                IF @@ROWCOUNT = 0
                    BEGIN
                        INSERT INTO ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
                             ' AS nvarchar(MAX)) + REPLACE(@InsertIntoString, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        )
                        OUTPUT
                             ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)')
                                    ,N'/*[INDENT SPACES]*/'
                                    ,CASE WHEN @HasRowVersionStampFlag = 1
                                              THEN N'                            '
                                         ELSE N'                            '
                                     END
                                 )                                                + N'
                        INTO #Output (
                             ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        )
                        VALUES (
                             ' + REPLACE(@InsertIntoValuesString, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        );

                    END;

                /* Select the inserted row from the output temporary table to return */
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                FROM
                    #Output;'
                                                                             ,N'                '
                                                                             ,CASE WHEN @HasRowVersionStampFlag = 0 THEN N'        ' ELSE N'                ' END
                                                                          );

                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N'
            END;'               ;

                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + N'
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteUpsertString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Indate (Insert/Update) procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Indate'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CASE CL.ColumnName
                                                                                                                                             WHEN @RowUpdateTimeColumnName
                                                                                                                                                 THEN CASE @RowUpdateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             WHEN @RowCreateTimeColumnName
                                                                                                                                                 THEN CASE @RowCreateTimeFunction
                                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                                      END
                                                                                                                                             ELSE N'@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                END

                                                                                                                                         END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowCreateTimeColumnName, @RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Check for RowVersionStamp to include or exclude optimistic concurrency
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #ColumnList AS CL
                            WHERE
                                CL.ColumnName = @RowVersionStampColumnName
                            AND CL.Depth      = 0
                        )
                            BEGIN
                                SET @HasRowVersionStampFlag = 1;
                            END;
                        ELSE
                            BEGIN
                                SET @HasRowVersionStampFlag = 0;
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + CASE CL.ColumnName
                                                                                                     WHEN @RowCreatePersonColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,@' + @RowUpdatePersonColumnName
                                                                                                     WHEN @RowUpdateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowUpdateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     WHEN @RowCreateTimeColumnName
                                                                                                         THEN N'/*[INDENT SPACES]*/,' + CASE @RowCreateTimeFunction
                                                                                                                                          WHEN 'SYSDATETIMEOFFSET()'
                                                                                                                                              THEN N'SYSDATETIMEOFFSET()'
                                                                                                                                          WHEN 'SYSUTCDATETIME()'
                                                                                                                                              THEN N'SYSUTCDATETIME()'
                                                                                                                                          WHEN 'SYSDATETIME()'
                                                                                                                                              THEN N'SYSDATETIME()'
                                                                                                                                          WHEN 'GETUTCDATE()'
                                                                                                                                              THEN N'GETUTCDATE()'
                                                                                                                                          WHEN 'GETDATE()'
                                                                                                                                              THEN N'GETDATE()'
                                                                                                                                          WHEN 'CURRENT_TIMESTAMP'
                                                                                                                                              THEN N'CURRENT_TIMESTAMP'
                                                                                                                                          ELSE N'SYSDATETIME()'
                                                                                                                                      END
                                                                                                     ELSE N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                          END
                                                                                                 END


                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowVersionStampColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 0
                        AND CL.IsComputedFlag   = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN (@RowCreatePersonColumnName, @RowUpdatePersonColumnName, @RowUpdateTimeColumnName, @RowCreateTimeColumnName, @TemporalRowStartColumName, @TemporalRowEndColumName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure                        
                        **********************************************************************************************************************/
                        SET @ExecuteIndateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to insert or update a single row in the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**
** Notes:       If your table includes the column RowVersionStamp optimistic concurrency T-SQL code will be generated.
**              Consider using the Upsert (Update/Insert) stored procedure if you expect more updates than inserts.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableOutputStringColumnType, N'/*[INDENT SPACES]*/', N'            ') + N'
        );
'                       ;
                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N'
        IF @'                                              + @RowVersionStampColumnName + N' IS NOT NULL
            BEGIN
                UPDATE
                    '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     '                                     + REPLACE(@UpdateString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                OUTPUT
                     '                                     + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                    ') + N'
                INTO #Output (
                     '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                WHERE
                    '                                      + REPLACE(@WhereString, N'/*[INDENT SPACES]*/', N'                ') + N';' + CASE WHEN CHARINDEX(@RowVersionStampColumnName, @WhereString, 0) > 0
                                                                                                                                                THEN N'

                IF @@ROWCOUNT = 0
                    BEGIN
                        ;THROW 52001, ''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1;
                        /* Use RAISERROR below if you do not need a hard error thrown.
                        RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                        RETURN -1;*/
                    END
                ELSE
                    BEGIN
                        /* Select the inserted row from the output temporary table to return */
                        SELECT
                             ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        FROM
                            #Output;
                    END;'
                                                                                                                                           ELSE N''
                                                                                                                                       END + N'
            END;
        ELSE
            BEGIN'              ;
                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + REPLACE(N'
                INSERT INTO ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
                     ' AS nvarchar(MAX)) + REPLACE(@InsertIntoString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                OUTPUT
                     ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                    ') + N'
                INTO #Output (
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                )
                SELECT
                     ' + REPLACE(@InsertIntoValuesString, N'/*[INDENT SPACES]*/', N'                    ') + N'
                WHERE
                    NOT EXISTS (
                    SELECT
                        *
                    FROM
                        ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + N'
                    WHERE
                        ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*[INDENT SPACES]*/AND [' + @RowVersionStampColumnName + '] = @' + @RowVersionStampColumnName + '', N''), N'/*[INDENT SPACES]*/', N'                    ') + N'
                );

                IF @@ROWCOUNT = 0
                    BEGIN
                        UPDATE
                            ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                        SET
                             ' + REPLACE(@UpdateString, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        OUTPUT
                             ' + REPLACE(REPLACE(@OutputString, 'Inserted.[' + @RowVersionStampColumnName + ']', 'CONVERT(NVARCHAR(20), CONVERT(BINARY(8), Inserted.[' + @RowVersionStampColumnName + ']), 1)'), N'/*[INDENT SPACES]*/', N'                            ') + N'
                        INTO #Output (
                             ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                            ') + N'
                        )
                        WHERE
                            ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*[INDENT SPACES]*/AND [' + @RowVersionStampColumnName + '] = @' + @RowVersionStampColumnName + '', N''), N'/*[INDENT SPACES]*/', N'                        ') + N';

                    END;

                /* Select the inserted row from the output temporary table to return */
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                    ') + N'
                FROM
                    #Output;', N'                ', CASE WHEN @HasRowVersionStampFlag = 0 THEN N'        ' ELSE N'                ' END);

                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N'
            END;'               ;

                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + N'
    
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteIndateString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Delete stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Delete'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND (
                            CL.IsPrimaryKeyFlag = 1
                            OR (CL.ColumnName   = @RowVersionStampColumnName AND CL.Depth = 0)
                        )
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*[INDENT SPACES]*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth             = 0
                        AND (CL.IsPrimaryKeyFlag = 1 OR CL.ColumnName = @RowVersionStampColumnName)
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 25);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteDeleteString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to delete a single row in the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteDeleteString = @ExecuteDeleteString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteDeleteString = @ExecuteDeleteString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        DELETE FROM
            '                                      + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + CASE WHEN LEN(@TableDescription) > 0 THEN N' /* ' + @TableDescription + N' */' ELSE N'' END;

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @ExecuteDeleteString = @ExecuteDeleteString + N'
        WHERE
            '                                              + REPLACE(@WhereString, N'/*[INDENT SPACES]*/', N'        ') + N';';
                            END;

                        SET @ExecuteDeleteString = @ExecuteDeleteString + CASE WHEN CHARINDEX(@RowVersionStampColumnName, @WhereString, 0) > 0
                                                                                   THEN N'

        IF @@ROWCOUNT = 0
            BEGIN
                ;THROW 52001, ''The record you attempted to delete was modified by another user after you received the original values! The delete operation was canceled. If you still want to delete this record, click the Delete button again.'', 1;
                /* Use RAISERROR below if you do not need a hard error thrown.
                RAISERROR(N''The record you attempted to delete was modified by another user after you received the original values! The delete operation was canceled. If you still want to delete this record, click the Delete button again.'', 1, 1) WITH NOWAIT;
                RETURN -1;*/
            END;'
                                                                              ELSE N''
                                                                          END;

                        SET @ExecuteDeleteString = @ExecuteDeleteString + N'
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteDeleteString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create DeleteMultiple stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'DeleteMultiple'
                    BEGIN

                        /**********************************************************************************************************************
                        ** Build the columns strings to search for rows to delete
                        **********************************************************************************************************************/
                        SELECT
                            @TemporaryTableStringColumnType = @TemporaryTableStringColumnType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + N' NULL'
                           ,@TemporaryTableStringType       = @TemporaryTableStringType + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName)
                           ,@SelectString                   = @SelectString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.TableAlias) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName)
                           ,@JoinString                     = @JoinString + @NewLineString + N'/*[INDENT SPACES]*/AND ' + N'[K].' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName)
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsPrimaryKeyFlag = 1
                        AND CL.Depth            = 0;

                        /* Fix the first item */
                        IF LEN(@TemporaryTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryTableStringColumnType = RIGHT(@TemporaryTableStringColumnType, LEN(@TemporaryTableStringColumnType) - 22);
                            END;

                        IF LEN(@TemporaryTableStringType) > 0
                            BEGIN
                                SET @TemporaryTableStringType = RIGHT(@TemporaryTableStringType, LEN(@TemporaryTableStringType) - 22);
                            END;

                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 22);
                            END;

                        IF LEN(@JoinString) > 0
                            BEGIN
                                SET @JoinString = RIGHT(@JoinString, LEN(@JoinString) - 25);
                            END;

                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N'Value nvarchar(MAX) = NULL' AS nvarchar(MAX)) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                          END + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N'Operator nvarchar(30) = N''Equals''' AS varchar(MAX))
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the BETWEEN parameter variables for splitting parameters into begin and end variables for BETWEEN operations
                        **********************************************************************************************************************/
                        SELECT
                            @BetweenVariableString = @BetweenVariableString + @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'Begin ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'End ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                THEN @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + N'EndDataType nvarchar(MAX);'
                                                           ELSE N''
                                                       END + CASE WHEN CL.TypeName IN ('time')
                                                                      THEN @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + N'EndPrecision nvarchar(MAX);'
                                                                 ELSE N''
                                                             END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@BetweenVariableString) > 0
                            BEGIN
                                SET @BetweenVariableString = RIGHT(@BetweenVariableString, LEN(@BetweenVariableString) - 21);
                            END;


                        /**********************************************************************************************************************
                        ** Build the temporary tables for passing in lists
                        **********************************************************************************************************************/
                        SELECT
                            @TempTableListString = @TempTableListString + @NewLineString + N'/*[INDENT SPACES]*/CREATE TABLE #' + CL.ColumnNameCleaned + CAST(N'Value (' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + N' ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N' NULL);'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TempTableListString) > 0
                            BEGIN
                                SET @TempTableListString = RIGHT(@TempTableListString, LEN(@TempTableListString) - 21);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        ** Unsupported Column Types: 'image', 'text', 'sql_variant', 'ntext', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'xml', 'sysname'
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + N'
    IF @'                                  + CL.ColumnNameCleaned + CAST(N'Value IS NOT NULL OR @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST(N'Operator IN (''Blanks'', ''NonBlanks'')
        BEGIN
            /* Figure out if the value contains the string [' + @SearchSeparatorString + '] */
            SET @SeparatorStartingPosition = CHARINDEX(''' + @SearchSeparatorString + ''', @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');

            IF @'                          + CL.ColumnNameCleaned + N'Operator IN (''Exists'', ''NotExists'')
                BEGIN
                    /* Extract JSON array into temporary table for use with Exists and NotExists where operators */
                    INSERT INTO #'         + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N' (' + QUOTENAME(CL.ColumnName) + N')
                    SELECT CAST(Value AS ' + CL.TypeName + CL.TypeLength + N') FROM OPENJSON(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');
                END
            ELSE
                BEGIN
                    /* Split the value into begin and end variables for other where operators */
                    IF @SeparatorStartingPosition = 0
                        BEGIN
                            SET @'         + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                            SET @'         + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                        END;
                    ELSE
                        BEGIN
                            SET @'         + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', 1, @SeparatorStartingPosition - 1);
                            SET @'         + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', @SeparatorStartingPosition + 4, LEN(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N'));
                        END;
                END;
'                                          +

                            /* Build the date statements */
                            CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                     THEN N'
                /* Determine the date data types */
                IF CHARINDEX('':'', @' + CL.ColumnNameCleaned + N'End) > 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''datetime'';
                    END;
                ELSE
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''date'';
                    END;

                /* Check for begin month/year */
                IF LEN(@' + CL.ColumnNameCleaned + N'Begin) IN (6, 7)
                    BEGIN
                        IF CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin) > 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;
                        IF @SeparatorStartingPosition = 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''-'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;

                        IF @SeparatorStartingPosition > 0
                            BEGIN
                                IF LEN(SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)) = 4
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-1'';
                                    END;
                                ELSE
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-1'';
                                    END;
                            END;
                    END;

                    '
                                ELSE
                                    /* Build the time statements */
                                    CASE WHEN CL.TypeName IN ('time')
                                             THEN N'
                /* Determine the time precision (hour, minute or second)  */
                IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Hour'';
                    END;
                ELSE IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 1
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Minute'';
                        END;
                ELSE
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Second'';
                        END;

'
                                        ELSE N''
                                    END
                            END            +


                            /* Build the WHERE clause  */
                            N'
                SET @StringToExecute = @StringToExecute + ' + CASE WHEN CL.TypeName IN ('tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                                                                       THEN N'

                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''EqualsWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''DoesNotEqual''                   THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''DoesNotEqualWithBlanks''         THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThan''                    THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''GreaterThanWithBlanks''          THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThanOrEqualTo''           THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThan''                       THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''LessThanWithBlanks''             THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThanOrEqualTo''              THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''Between''                        THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
            WHEN ''BetweenWithBlanks''              THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''NotBetween''                     THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
            WHEN ''NotBetweenWithBlanks''           THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''Blanks''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
            WHEN ''NonBlanks''                      THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
            WHEN ''Exists''                         THEN N''
    AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
            WHEN ''NotExists''                      THEN N''
    AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                    ELSE N''
    AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                  ELSE CASE WHEN CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'timestamp')
                                                                                THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                   THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
            WHEN ''EqualsWithBlanks''         THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''DoesNotEqual''             THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
            WHEN ''DoesNotEqualWithBlanks''   THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''BeginsWith''               THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
            WHEN ''BeginsWithWithBlanks''     THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''EndsWith''                 THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
            WHEN ''EndsWithWithBlanks''       THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''Contains''                 THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
            WHEN ''ContainsWithBlanks''       THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''DoesNotContain''           THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
            WHEN ''DoesNotContainWithBlanks'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''Blanks''                   THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
            WHEN ''NonBlanks''                THEN N''
    AND (NULLIF(LEN(' +     QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N'), 0)) IS NOT NULL''
            WHEN ''Exists''                   THEN N''
    AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
            WHEN ''NotExists''                THEN N''
    AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                            ELSE N''
    AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                           ELSE CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                         THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator

                    WHEN ''Equals''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
            WHEN ''EqualsWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''DoesNotEqual''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
            WHEN ''DoesNotEqualWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThan''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
            WHEN ''GreaterThanWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThanOrEqualTo''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
            WHEN ''GreaterThanOrEqualToWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThan''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
            WHEN ''LessThanWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThanOrEqualTo''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
            WHEN ''LessThanOrEqualToWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''Between'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName))'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                                   END + N'''
                    ELSE N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End)'
                                                                                                   END + N'''
                                    END

            WHEN ''BetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                   END + N'''
                    ELSE N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                   END + N'''
                                    END
            WHEN ''NotBetween'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName))'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                                  END + N'''
                    ELSE N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End)'
                                                                                                  END + N'''
                                    END

            WHEN ''NotBetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                  END + N'''
                    ELSE N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                  END + N'''
                                    END
            WHEN ''Blanks''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
            WHEN ''NonBlanks''                      THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
            WHEN ''Exists''                         THEN N''
    AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
            WHEN ''NotExists''                      THEN N''
    AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
            ELSE N''
    AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                    ELSE CASE WHEN CL.TypeName IN ('time')
                                                                                                  THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''EqualsWithBlanks''               THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''DoesNotEqual''                   THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''DoesNotEqualWithBlanks''         THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThan''                    THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''GreaterThanWithBlanks''          THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''GreaterThanOrEqualTo''           THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThan''                       THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''LessThanWithBlanks''             THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''LessThanOrEqualTo''              THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
            WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''Between''                        THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
            WHEN ''BetweenWithBlanks''                        THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''NotBetween''                        THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
            WHEN ''NotBetweenWithBlanks''                        THEN N''
    AND (' +                QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
            WHEN ''Blanks''                         THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
            WHEN ''NonBlanks''                      THEN N''
    AND ' +                 QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
            WHEN ''Exists''                         THEN N''
    AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
            WHEN ''NotExists''                      THEN N''
    AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                    ELSE N''
    AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                             ELSE N' 
    AND 1=2 /* Data type is not supported */'
                                                                                         END
                                                                                END
                                                                       END
                                                              END + N'
            END
        '
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');



                        /**********************************************************************************************************************
                        ** Build the parameter definition and parameters for sys.sp_executesql
                        **********************************************************************************************************************/
                        SELECT
                            @SP_ExecuteSQLParameterDefinitionString = @SP_ExecuteSQLParameterDefinitionString + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'Begin ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'End ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        SELECT
                            @SP_ExecuteSQLParametersString = @SP_ExecuteSQLParametersString + N'
                    ,@'                                      + CL.ColumnNameCleaned + N'Begin = @' + CL.ColumnNameCleaned + N'Begin
                    ,@'                                      + CL.ColumnNameCleaned + N'End = @' + CL.ColumnNameCleaned + N'End'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        /**********************************************************************************************************************
                        ** Find the table alias
                        **********************************************************************************************************************/
                        SELECT TOP (1)
                            @TableAlias = TL.referenced_alias
                        FROM
                            #TableList AS TL
                        WHERE
                            TL.referenced_table  = @TableName
                        AND TL.referenced_schema = @SchemaName
                        ORDER BY
                            TL.TableListId ASC;

                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteDeleteMultipleString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to execute performant optional parameter search (kitchen sink, Swiss army knife, catch-all search) in the ' + @SchemaName + N'.' + @TableName + N' table then delete. ' + @TableDescription + N'
**               Assess enabling ''Optimize for AdHoc Workloads'' if the adhoc plan cache is 20-30% of the total plan cache.
**
** NOTES:      Sometimes you want to delete all the records in a single transaction. Other times you want to break the 
**               delete up into batches to allow other queries through. Large deletes can also grow you transaction log.
**                                 
**              You can test the number of records to delete to assess what is most performant. The goal is to adjust 
**               the "Batch Number" in the CTE to get the delete to not take out an eXclusive lock. You are looking for 
**               the OBJECT to not have a request_mode="X" (Exclusive).
**                                                  
**              Works with tables that have a primary key(s).
**              Add "ON DELETE CASCADE" to your foreign key reference to delete referenced row from the parent table.
**              Indexes on the search columns will speed up the search for rows to delete.
**              Hand-crafted delete code might be more performant. Dropping indexes, perform the delete, then put them 
**               back after the delete operation.
**              You can look into partition swapping to remove large amounts of data.
**              Snapshot Isolation can prevent blocking.
**
** Parameters:  @[COLUMN-NAME]Value: There are three ways to pass values for each table column. There are samples below
**                                   with their supported operators
**
**                Single Value = "Value 1" 
**                  Allowed Operators: (Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, 
**                                      GreaterThanWithBlanks, GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, 
**                                      LessThan, LessThanWithBlanks, LessThanOrEqualTo, LessThanOrEqualToWithBlanks, 
**                                      BeginsWith, BeginsWithWithBlanks, EndsWith, EndsWithWithBlanks, Contains, 
**                                      ContainsWithBlanks, DoesNotContain, DoesNotContainWithBlanks)
**
**                Ranged Value = "Value 1 to Value 2"
**                 Allowed Operators: (Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks)
**
**                Multivalued JSON = "["Value 1","Value 2","Value 3"]"
**                 Allowed Operators: (Exists, NotExists)
**                  https://kevinmartin.tech/go/serialize-json
**
**              @[COLUMN-NAME]Operator: Different column data types have different operators that apply.
**
**                 Numeric Columns (tinyint, smallint, int, bigint, bit, decimal, numeric, smallmoney, money, real, float)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, 
**                   LessThanOrEqualTo, LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, 
**                   NotBetweenWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 String Columns (varchar, nvarchar, char, nchar, uniqueidentifier, timestamp)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, BeginsWith, BeginsWithWithBlanks, 
**                   EndsWith, EndsWithWithBlanks, Contains, ContainsWithBlanks, DoesNotContain, 
**                   DoesNotContainWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 DateTime Columns (date, time, datetime2, datetimeoffset, smalldatetime, datetime)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, LessThanOrEqualTo, 
**                   LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks, Blanks, 
**                   NonBlanks, Exists, NotExists
**
**              @AtTimeZoneName: This is the value of the timezone datetimeoffset table columns should be converted to
**                               Use "SELECT name FROM sys.time_zone_info" for a list of supported time zone names.
**
**              @Debug: If you set this to 1 it will display an XML link in the results you can click on to view the 
**                       query text. If you set this to 0 it will execute the query.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteDeleteMultipleString = @ExecuteDeleteMultipleString + N' (
     '                                                             + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ') + N'
    ,@AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */
    ,@Debug bit = 0
)'                              ;
                            END;

                        SET @ExecuteDeleteMultipleString = @ExecuteDeleteMultipleString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        /* Stored Procedure Variables */
        DECLARE @StringToExecute nvarchar(MAX);
        DECLARE @SeparatorStartingPosition bigint;
        DECLARE @ParameterDefinition nvarchar(MAX);

        SET @StringToExecute = N'''';
        SET @SeparatorStartingPosition = 0;

        /* Parameter Variables - This is for splitting parameters into begin and end variables for BETWEEN operations */
        '                                                  + REPLACE(@BetweenVariableString, N'/*[INDENT SPACES]*/', N'        ') + N'

        /* Create Temp Tables - This is for inserting JSON into for passing a list of parameter values */
        '                                                  + REPLACE(@TempTableListString, N'/*[INDENT SPACES]*/', N'        ') + N'

        SET @StringToExecute = N''
/* Executed by stored procedure named '                    + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName + @ProcedureType) + N' */'' + N''

/* Create temporary table to store the searched keys */
CREATE TABLE #Keys (
     KeyId bigint NOT NULL IDENTITY(1, 1) PRIMARY KEY CLUSTERED
    ,'                                                     + REPLACE(@TemporaryTableStringColumnType, N'/*[INDENT SPACES]*/', N'    ') + N'
);

/* Search for the rows to delete and insert into keys temporary table */
INSERT INTO #Keys (
     '                                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'    ') + N'
)
SELECT
     '                                                     + REPLACE(@SelectString, N'/*[INDENT SPACES]*/', N'    ') + N'
FROM
    '                                                      + REPLACE(REPLACE(REPLACE(REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N''), N'/*[ON SPACE]*/', N'        '), N'/*[INDENT SPACES]*/', N'    '), N'/*[JOIN CONDITION]*/', N'') + N'
WHERE
    1 = 1'''                                               + @WhereString + N'

SET @StringToExecute = @StringToExecute + N''

DECLARE @FirstKeyId bigint;
SET @FirstKeyId = -9223372036854775807;

WHILE EXISTS (
    SELECT
        *
    FROM
        #Keys AS [K]
        INNER JOIN '                                       + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + N' AS ' + QUOTENAME(@TableAlias) + N'
            ON '                                           + REPLACE(@JoinString, N'/*[INDENT SPACES]*/', N'            ') + N'
    )
    BEGIN
        WITH Keys
            AS (
                SELECT TOP (1000) /* Batch Number */
                     '                                     + REPLACE(@TemporaryTableStringType, N'/*[INDENT SPACES]*/', N'                ') + N'
                FROM
                    #Keys AS [K]
                WHERE
                    [K].KeyId >= @FirstKeyId
                ORDER BY
                    [K].KeyId
            )
        DELETE
            '                                              + QUOTENAME(@TableAlias) + N'
        FROM
            Keys AS [K]
            INNER JOIN '                                   + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + N' AS ' + QUOTENAME(@TableAlias) + N'
                ON '                                       + REPLACE(@JoinString, N'/*[INDENT SPACES]*/', N'                ') + N';

        /* If our FirstId filtered out all rows, reset it, something went wrong: */
        IF @@ROWCOUNT = 0
            BEGIN
                SET @FirstKeyId = -9223372036854775807;
            END;

        /* Reset our low key for the next pass: */
        SELECT TOP (1)
            @FirstKeyId = [K].KeyId
        FROM
            #Keys                   AS [K]
            INNER JOIN '                                   + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + N' AS ' + QUOTENAME(@TableAlias) + N'
                ON '                                       + REPLACE(@JoinString, N'/*[INDENT SPACES]*/', N'                ') + N'
        WHERE
            [K].KeyId >= @FirstKeyId
        ORDER BY
            [K].KeyId;
    END;''

        IF @Debug = 1
            BEGIN
                SELECT 
                    CAST(N''/* Click here to view the generated code.
Copy just the T-SQL below this block comment into a new query window to execute. */

'' AS nvarchar(MAX)) + @StringToExecute + N''


/* Copy just the T-SQL above this block comment into a new query window to execute. */
'' AS [processing-instruction(output)] FOR XML PATH('''')
            END;
        ELSE
            BEGIN
                SET @ParameterDefinition = N''@AtTimeZoneName nvarchar(max)' + @SP_ExecuteSQLParameterDefinitionString + N''';

                EXEC sys.sp_executesql
                     @stmt = @StringToExecute
                    ,@params = @ParameterDefinition
                    ,@AtTimeZoneName = @AtTimeZoneName'    + @SP_ExecuteSQLParametersString + N';
            END
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteDeleteMultipleString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Search stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Search'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Find the IDENTITY, PRIMARY KEY or first column for default order by
                        **********************************************************************************************************************/
                        SELECT TOP (1)
                            @IdentityColumnNameString       = CL.ColumnName
                           ,@IdentityColumnTableAliasString = CL.TableAlias
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Check for missing Identity Column */
                        IF LEN(@IdentityColumnNameString) = 0
                            BEGIN
                                SELECT TOP (1)
                                    @IdentityColumnNameString       = CL.ColumnName
                                   ,@IdentityColumnTableAliasString = CL.TableAlias
                                FROM
                                    #ColumnList AS CL
                                WHERE
                                    CL.Depth            = 0
                                AND CL.IsPrimaryKeyFlag = 1
                                ORDER BY
                                    CL.ColumnListId ASC;
                            END;

                        /* Check for missing Primary Key and just use the first column */
                        IF LEN(@IdentityColumnNameString) = 0
                            BEGIN
                                SELECT TOP (1)
                                    @IdentityColumnNameString       = CL.ColumnName
                                   ,@IdentityColumnTableAliasString = CL.TableAlias
                                FROM
                                    #ColumnList AS CL
                                WHERE
                                    CL.Depth = 0
                                ORDER BY
                                    CL.ColumnListId ASC;
                            END;


                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N'Value nvarchar(MAX) = NULL' AS nvarchar(MAX)) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                          END + @NewLineString + N'/*[INDENT SPACES]*/,@' + CL.ColumnNameCleaned + CAST(N'Operator nvarchar(30) = N''Equals''' AS varchar(MAX))
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*[INDENT SPACES]*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(QUOTENAME(CL.TableAlias) AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                           THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                      ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                                  END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 22);
                            END;


                        /**********************************************************************************************************************
                        ** Build the BETWEEN parameter variables for splitting parameters into begin and end variables for BETWEEN operations
                        **********************************************************************************************************************/
                        SELECT
                            @BetweenVariableString = @BetweenVariableString + @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'Begin ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'End ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                THEN @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + N'EndDataType nvarchar(MAX);'
                                                           ELSE N''
                                                       END + CASE WHEN CL.TypeName IN ('time')
                                                                      THEN @NewLineString + N'/*[INDENT SPACES]*/DECLARE @' + CL.ColumnNameCleaned + N'EndPrecision nvarchar(MAX);'
                                                                 ELSE N''
                                                             END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@BetweenVariableString) > 0
                            BEGIN
                                SET @BetweenVariableString = RIGHT(@BetweenVariableString, LEN(@BetweenVariableString) - 21);
                            END;


                        /**********************************************************************************************************************
                        ** Build the temporary tables for passing in lists
                        **********************************************************************************************************************/
                        SELECT
                            @TempTableListString = @TempTableListString + @NewLineString + N'/*[INDENT SPACES]*/CREATE TABLE #' + CL.ColumnNameCleaned + CAST(N'Value (' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + N' ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N' NULL);'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TempTableListString) > 0
                            BEGIN
                                SET @TempTableListString = RIGHT(@TempTableListString, LEN(@TempTableListString) - 21);
                            END;


                        /**********************************************************************************************************************
                        ** Build the check if OrderColumn parameter is valid for ORDER BY
                        **********************************************************************************************************************/
                        SELECT
                            @OrderColumnString = @OrderColumnString + N', N''' + CL.ColumnName + N''''
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@OrderColumnString) > 0
                            BEGIN
                                SET @OrderColumnString = RIGHT(@OrderColumnString, LEN(@OrderColumnString) - 2);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        ** Unsupported Column Types: 'image', 'text', 'sql_variant', 'ntext', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'xml', 'sysname'
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + N'
        IF @'                              + CL.ColumnNameCleaned + CAST(N'Value IS NOT NULL OR @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST(N'Operator IN (''Blanks'', ''NonBlanks'')
            BEGIN
                /* Figure out if the value contains the string [' + @SearchSeparatorString + '] */
                SET @SeparatorStartingPosition = CHARINDEX(''' + @SearchSeparatorString + ''', @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');

                IF @'                      + CL.ColumnNameCleaned + N'Operator IN (''Exists'', ''NotExists'')
                    BEGIN
                        /* Extract JSON array into temporary table for use with Exists and NotExists where operators */
                        INSERT INTO #'     + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N' (' + QUOTENAME(CL.ColumnName) + N')
                        SELECT CAST(Value AS ' + CL.TypeName + CL.TypeLength + N') FROM OPENJSON(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');
                    END
                ELSE
                    BEGIN
                        /* Split the value into begin and end variables for other where operators */
                        IF @SeparatorStartingPosition > 0 AND @' + CL.ColumnNameCleaned + N'Operator IN (''Between'', ''BetweenWithBlanks'', ''NotBetween'', ''NotBetweenWithBlanks'')
                            BEGIN
                                SET @'     + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', 1, @SeparatorStartingPosition - 1);
                                SET @'     + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', @SeparatorStartingPosition + 4, LEN(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N'));
                            END;
                        ELSE
                            BEGIN
                                SET @'     + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                                SET @'     + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                            END;
                    END;
'                                          +

                            /* Build the date statements */
                            CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                     THEN N'
                /* Determine the date data types */
                IF CHARINDEX('':'', @' + CL.ColumnNameCleaned + N'End) > 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''datetime'';
                    END;
                ELSE
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''date'';
                    END;

                /* Check for begin month/year */
                IF LEN(@' + CL.ColumnNameCleaned + N'Begin) IN (6, 7)
                    BEGIN
                        IF CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin) > 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;
                        IF @SeparatorStartingPosition = 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''-'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;

                        IF @SeparatorStartingPosition > 0
                            BEGIN
                                IF LEN(SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)) = 4
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-1'';
                                    END;
                                ELSE
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-1'';
                                    END;
                            END;
                    END;

                    '
                                ELSE
                                    /* Build the time statements */
                                    CASE WHEN CL.TypeName IN ('time')
                                             THEN N'
                /* Determine the time precision (hour, minute or second)  */
                IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Hour'';
                    END;
                ELSE IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 1
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Minute'';
                        END;
                ELSE
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Second'';
                        END;

'
                                        ELSE N''
                                    END
                            END            +


                            /* Build the WHERE clause  */
                            N'
                SET @StringToExecute = @StringToExecute + ' + CASE WHEN CL.TypeName IN ('tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                                                                       THEN N'

                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                   THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''DoesNotEqualWithBlanks''         THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                    THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanWithBlanks''          THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''           THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                       THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanWithBlanks''             THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''              THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between''                        THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
                    WHEN ''BetweenWithBlanks''              THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''NotBetween''                     THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
                    WHEN ''NotBetweenWithBlanks''           THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Blanks''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                          ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                  ELSE CASE WHEN CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'timestamp')
                                                                                THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                   THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''EqualsWithBlanks''         THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''DoesNotEqual''             THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''DoesNotEqualWithBlanks''   THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''BeginsWith''               THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''BeginsWithWithBlanks''     THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''EndsWith''                 THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''EndsWithWithBlanks''       THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''Contains''                 THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''ContainsWithBlanks''       THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''DoesNotContain''           THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''DoesNotContainWithBlanks'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''Blanks''                   THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''NonBlanks''                THEN N''
            AND (NULLIF(LEN(' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N'), 0)) IS NOT NULL''
                    WHEN ''Exists''                   THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                    ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                           ELSE CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                         THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator

                    WHEN ''Equals''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
                    WHEN ''DoesNotEqualWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
                    WHEN ''GreaterThanWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
                    WHEN ''GreaterThanOrEqualToWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N'''
                    WHEN ''LessThanWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                  END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N'''
                    WHEN ''LessThanOrEqualToWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                                   END + N' OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName))'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                                   END + N'''
                            ELSE N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End)'
                                                                                                   END + N'''
                                          END

                    WHEN ''BetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                   END + N'''
                            ELSE N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                            THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                       ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                   END + N'''
                                          END
                    WHEN ''NotBetween'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName))'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                                  END + N'''
                            ELSE N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End)'
                                                                                                  END + N'''
                                          END

                    WHEN ''NotBetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE @AtTimeZoneName) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                  END + N'''
                            ELSE N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                           THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE @AtTimeZoneName OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                      ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                                  END + N'''
                                          END
                    WHEN ''Blanks''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                    ELSE CASE WHEN CL.TypeName IN ('time')
                                                                                                  THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                   THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''DoesNotEqualWithBlanks''         THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                    THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanWithBlanks''          THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''           THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                       THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanWithBlanks''             THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''              THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between''                        THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
                    WHEN ''BetweenWithBlanks''                        THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''NotBetween''                        THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
                    WHEN ''NotBetweenWithBlanks''                        THEN N''
            AND (' +        QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Blanks''                         THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + QUOTENAME(CL.TableAlias) + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                          ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                             ELSE N' 
            AND 1=2 /* Data type is not supported */'
                                                                                         END
                                                                                END
                                                                       END
                                                              END + N'
            END
        '
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        /**********************************************************************************************************************
                        ** Build the parameter definition and parameters for sys.sp_executesql
                        **********************************************************************************************************************/
                        SELECT
                            @SP_ExecuteSQLParameterDefinitionString = @SP_ExecuteSQLParameterDefinitionString + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'Begin ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'End ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        SELECT
                            @SP_ExecuteSQLParametersString = @SP_ExecuteSQLParametersString + N'
                    ,@'                                      + CL.ColumnNameCleaned + N'Begin = @' + CL.ColumnNameCleaned + N'Begin
                    ,@'                                      + CL.ColumnNameCleaned + N'End = @' + CL.ColumnNameCleaned + N'End'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        /**********************************************************************************************************************
                        ** Fix the first item for TableListInsertValuesString
                        **********************************************************************************************************************/
                        IF LEN(@TableListInsertValuesString) > 0
                            BEGIN
                                SET @TableListInsertValuesString = RIGHT(@TableListInsertValuesString, LEN(@TableListInsertValuesString) - 22);
                            END;

                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteSearchString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   https://kevinmartin.tech/go/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to execute performant optional parameter search (kitchen sink, Swiss army knife, catch-all search) on the ' + @SchemaName + N'.' + @TableName + N' table. ' + @TableDescription + N'
**              SQL Server will create one cached plan for a static catch-all stored procedure no matter what 
**              parameters are passed in. Dynamic SQL allows for multiple cached plans to be created for each 
**              combination of parameters passed in. 
**
**              Using OPTION (RECOMPILE) is not an "easy button" or "cheat code" solution in every sitution. Each time 
**              the query is compiled there is a CPU hit. This hint option might not be a big deal with small queries 
**              but your code might not work at scale. You or the query performance tuner will not be able to view 
**              metrics tracked in DMVs when using the OPTION (RECOMPILE) hint.
**
** Notes:       Using a view instead of a starting table could be the best way to craft a generated search store 
**              procedure. Creating a view allows you to specify the tables/columns/joins that are used in the searcg 
**              stored proecture generation.
**
**              Assess enabling ''Optimize for AdHoc Workloads'' if the adhoc plan cache is 20-30% of the total plan cache.
**
**              This dynamic SQL stored procedure does not prevent parameter sniffing. The best solution is to use 
**              comment injection to create separate cached execution plans based on the data distribution (big data, 
**              medium data). If a specific parameter value will return a large amount of data, check for the parameter 
**              value then add a comment like /* CustomerTypeId = 1, it needs a different cached execution plan */. 
**              You can keep a list of tables and columns that warrant their own custom plan somewhere like a table. 
**              You can incorporate this list into the dynamic SQL to create the injectable comment so when users pass 
**              the parameter value you will still get plan reuse and metrics DMV tracking.
**
**              Branching a main stored procedure to sub stored procedures is another way to combat this issue.
**
** Parameters:  @[COLUMN-NAME]Value: There are three ways to pass values for each table column. There are samples below
**                                   with their supported operators
**
**                Single Value = "Value 1" 
**                  Allowed Operators: (Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, 
**                                      GreaterThanWithBlanks, GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, 
**                                      LessThan, LessThanWithBlanks, LessThanOrEqualTo, LessThanOrEqualToWithBlanks, 
**                                      BeginsWith, BeginsWithWithBlanks, EndsWith, EndsWithWithBlanks, Contains, 
**                                      ContainsWithBlanks, DoesNotContain, DoesNotContainWithBlanks)
**
**                Ranged Value = "Value 1 to Value 2"
**                 Allowed Operators: (Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks)
**
**                Multivalued JSON = "["Value 1","Value 2","Value 3"]"
**                 Allowed Operators: (Exists, NotExists)
**                  https://kevinmartin.tech/go/serialize-json
**
**              @[COLUMN-NAME]Operator: Different column data types have different operators that apply.
**
**                 Numeric Columns (tinyint, smallint, int, bigint, bit, decimal, numeric, smallmoney, money, real, float)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, 
**                   LessThanOrEqualTo, LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, 
**                   NotBetweenWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 String Columns (varchar, nvarchar, char, nchar, uniqueidentifier, timestamp)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, BeginsWith, BeginsWithWithBlanks, 
**                   EndsWith, EndsWithWithBlanks, Contains, ContainsWithBlanks, DoesNotContain, 
**                   DoesNotContainWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 DateTime Columns (date, time, datetime2, datetimeoffset, smalldatetime, datetime)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, LessThanOrEqualTo, 
**                   LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks, Blanks, 
**                   NonBlanks, Exists, NotExists
**                     
**              @TemporalForSystemTimeValue: This is for system-versioned temporal tables time value. You will pass in a 
**                                            single datetime2 value or multiple based on the clause passed in.
**                                            {AS OF}: will be a single datetime2 value like 2022-02-03 17:01:54.9320817.
**                                            {FROM | BETWEEN | CONTAINED IN}: exepcts a data range like 2022-02-01 to 2022-02-03
**                                              or 2022-02-14 00:00:00.0000000 to 2022-02-15 23:59:59.9999999.
**                                            All: does not require a time value.
**
**              @TemporalForSystemTimeClause: This is for passing in a system-versioned temporal tables clause. Valid sub-
**                                             clauses are {AS OF | FROM | BETWEEN | CONTAINED IN | ALL}.
**
**              @PageNumber: This is for pagination of the query results. Pass 1 to return the 1st page of results, set 
**                           the value to 2 for the 2nd page.
**
**              @PageSize: This is for pagination of the query results. Pass 100 to return 100 rows for each 
**                         @PageNumber. You can set this to a high number (2147483647) and keep @PageNumber = 1 to return 
**                         "all" query rows.
**
**              @OrderColumns: Passing JSON document/text in this parameter allows for sorting the results. You can pass in 
**                             a single or multiple columns in the JSON text to allow for single or multiple column sorting 
**                             in the user interface. https://kevinmartin.tech/go/serialize-json
**
**                             You need to pass at least the ColumnName property. If there are duplicate column names in 
**                             the joined tables, you will need to provide the table name. 
**
**                             The order of the columns in the JSON string for multiple column ordering. You can provide 
**                             the OrderNumber property to ensure proper column sorting ordering.
**
**                             Single Column Example
**                              {"ColumnName": "LastName", "Direction": "ASC"}
**
**                             Multiple Column Example (please note the array [] brackets)
**                              [
**                                {
**                                  "ColumnName": "OrganizationName"
**                                },
**                                {
**                                  "TableName": "CityTown",
**                                  "ColumnName": "CityTownName"
**                                },
**                                {
**                                  "TableName": "StateProvince",
**                                  "ColumnName": "StateProvinceName",
**                                  "Direction": "DESC",
**                                  "OrderNumber": 1
**                                },
**                                {
**                                  "SchemaName": "Sales",
**                                  "TableName": "Customer",
**                                  "ColumnName": "AccountCode",
**                                  "Direction": "ASC",
**                                  "OrderNumber": 2
**                                }
**                              ]
**
**              @AtTimeZoneName: This is the value of the timezone datetimeoffset table columns should be converted to
**                               Use "SELECT name FROM sys.time_zone_info" for a list of supported time zone names.
**
**              @Debug: If you set this to 1 it will display an XML link in the results you can click on to view the 
**                       query text. If you set this to 0 it will execute the query.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteSearchString = @ExecuteSearchString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*[INDENT SPACES]*/', N'    ');

                                IF @IsTemporalTableStoredProcedureFlag = 1
                                    BEGIN
                                        SET @ExecuteSearchString = @ExecuteSearchString + N'
    ,@TemporalForSystemTimeValue nvarchar(MAX) = NULL /* {2022-02-03 17:01:54.9320817 | 2022-02-01 to 2022-02-03} */
    ,@TemporalForSystemTimeClause varchar(20) = NULL /* {AS OF | FROM | BETWEEN | CONTAINED IN | ALL} */';
                                    END;

                                SET @ExecuteSearchString = @ExecuteSearchString + N'
    ,@AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */
    ,@PageNumber int = 1
    ,@PageSize int = 100
    ,@OrderColumns nvarchar(MAX) = N''[{"SchemaName": "'   + @SchemaName + N'", "TableName": "' + @TableName + N'", "ColumnName": "' + @IdentityColumnNameString + N'", "Direction": "ASC", "OrderNumber": 1}]' + N'''
    ,@Debug bit = 0
)'                              ;
                            END;

                        SET @ExecuteSearchString = @ExecuteSearchString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        /* Stored Procedure Variables */
        DECLARE @StringToExecute nvarchar(MAX);
        DECLARE @SeparatorStartingPosition bigint;
        DECLARE @ParameterDefinition nvarchar(MAX);
        DECLARE @OrderByString nvarchar(MAX);

        SET @StringToExecute = N'''';
        SET @SeparatorStartingPosition = 0;
        SET @OrderByString = N'''';

        /* Parameter Variables - This is for splitting parameters into begin and end variables for BETWEEN operations */';
                        IF @IsTemporalTableStoredProcedureFlag = 1
                            BEGIN
                                SET @ExecuteSearchString = @ExecuteSearchString + N'
        DECLARE @TemporalForSystemTimeBegin nvarchar(MAX);
        DECLARE @TemporalForSystemTimeEnd nvarchar(MAX);';
                            END;

                        SET @ExecuteSearchString = @ExecuteSearchString + N'
        '                                          + REPLACE(@BetweenVariableString, N'/*[INDENT SPACES]*/', N'        ');

                        IF @IsTemporalTableStoredProcedureFlag = 1
                            BEGIN
                                SET @ExecuteSearchString = @ExecuteSearchString + N'

        /*  Split out the TemporalForSystemTimeValue parameter */
        IF @TemporalForSystemTimeValue IS NOT NULL AND @TemporalForSystemTimeClause IN (''FROM'', ''BETWEEN'', ''CONTAINED IN'')
            BEGIN
                /* Figure out if the value contains the string [' + @SearchSeparatorString + N'] */
                SET @SeparatorStartingPosition = CHARINDEX(''' + @SearchSeparatorString + N''', @TemporalForSystemTimeValue);
                
                /* Split the value into begin and end variables for other where operators */
                IF @SeparatorStartingPosition = 0
                    BEGIN
                        SET @TemporalForSystemTimeBegin = @TemporalForSystemTimeValue;
                        SET @TemporalForSystemTimeEnd = @TemporalForSystemTimeValue;
                    END;
                ELSE
                    BEGIN
                        SET @TemporalForSystemTimeBegin = SUBSTRING(@TemporalForSystemTimeValue, 1, @SeparatorStartingPosition - 1);
                        SET @TemporalForSystemTimeEnd = SUBSTRING(@TemporalForSystemTimeValue, @SeparatorStartingPosition + 4, LEN(@TemporalForSystemTimeValue));
                END;
            END;
'                               ;
                            END;

                        SET @ExecuteSearchString = @ExecuteSearchString + N'
        /* Create Temp Tables - This is for inserting JSON into for passing a list of parameter values */
        '                                          + REPLACE(@TempTableListString, N'/*[INDENT SPACES]*/', N'        ') + N'

        /* Create Temp Table - This is to store the table aliases for translation */
        CREATE TABLE #TableAliasList (
             SchemaName nvarchar(128) NULL
            ,TableName  nvarchar(128) NULL
            ,TableAlias nvarchar(128) NULL
        );

        INSERT INTO #TableAliasList (SchemaName, TableName, TableAlias)
        VALUES
             '                                     + REPLACE(@TableListInsertValuesString, N'/*[INDENT SPACES]*/', N'            ') + N';
            
        /* Create Temp Tables - This is for inserting JSON into for passing a list of parameter values */
        CREATE TABLE #OrderColumns (
             SchemaName  nvarchar(128) NULL
            ,TableName   nvarchar(128) NULL
            ,ColumnName  nvarchar(128) NOT NULL
            ,Direction   nvarchar(4)   NULL
            ,OrderNumber int           NULL
        );

        /* Extract JSON into temporary table for use with ordering results */
        INSERT INTO #OrderColumns (SchemaName, TableName, ColumnName, Direction, OrderNumber)
        SELECT
            SchemaName  = CASE WHEN LEN(OC.SchemaName) > 0 THEN OC.SchemaName ELSE NULL END
           ,TableName   = CASE WHEN LEN(OC.TableName) > 0 THEN OC.TableName ELSE NULL END
           ,ColumnName  = CASE WHEN LEN(OC.ColumnName) > 0 THEN OC.ColumnName ELSE NULL END
           ,Direction   = CASE WHEN LEN(OC.Direction) > 0 THEN OC.Direction ELSE NULL END
           ,OrderNumber = OC.OrderNumber
        FROM
            OPENJSON(@OrderColumns)
                WITH (
                    SchemaName nvarchar(128)
                   ,TableName nvarchar(128)
                   ,ColumnName nvarchar(128)
                   ,Direction nvarchar(4)
                   ,OrderNumber int
                ) AS OC;

        /* Check if OrderColumn parameters are valid for ORDER BY */
        IF EXISTS (SELECT * FROM #OrderColumns WHERE ColumnName NOT IN (
            '                                      + @OrderColumnString + N'
            )
        )
            BEGIN
                ;THROW 52001, ''OrderColumn parameter is not a valid table column!'', 1;
                /* Use RAISERROR below if you do not need a hard error thrown.
                RAISERROR(N''OrderColumn parameter is not a valid table column!'', 1, 1) WITH NOWAIT;
                RETURN -1;*/
            END;

        /* Build the ORDER BY */
        SELECT
            @OrderByString = @OrderByString + N'', '' + CASE WHEN TAL.TableAlias IS NOT NULL THEN QUOTENAME(TAL.TableAlias) + N''.'' ELSE N'''' END + QUOTENAME(OC.ColumnName) + CASE WHEN OC.Direction = N''DESC'' THEN N'' DESC'' ELSE N'' ASC'' END
        FROM
            #OrderColumns              AS OC
            LEFT OUTER JOIN #TableAliasList AS TAL
                ON CASE WHEN OC.SchemaName IS NOT NULL
                      THEN OC.SchemaName
                      ELSE (
                       SELECT TOP (1)
                           TAL.SchemaName
                       FROM
                           #TableAliasList AS TAL
                       WHERE
                           TAL.TableName = OC.TableName
                       ORDER BY
                           TAL.SchemaName
                   ) END         = TAL.SchemaName
                AND OC.TableName = TAL.TableName
        ORDER BY
            OC.OrderNumber ASC;

        /* Fix the first item */
        IF LEN(@OrderByString) > 0
            BEGIN
                SET @OrderByString = RIGHT(@OrderByString, LEN(@OrderByString) - 2);
            END;

        SET @StringToExecute = N''

/* Executed by stored procedure named '            + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName + @ProcedureType) + N' */'' + N''

WITH Keys
    AS (
        SELECT DISTINCT
            '                                      + QUOTENAME(@IdentityColumnNameString) + N' = ' + QUOTENAME(@IdentityColumnTableAliasString) + N'.' + QUOTENAME(@IdentityColumnNameString) + N'
            ,RowNumber = DENSE_RANK() OVER (ORDER BY '' + @OrderByString + N''' +  
            
            CASE WHEN @IsTemporalTableStoredProcedureFlag = 1 THEN
                N', ' + QUOTENAME(@IdentityColumnTableAliasString) + N'.' + QUOTENAME(@IdentityColumnNameString) + N' ASC /* in order to use DENSE_RANK() the identity column needs to be included, even if duplicated. */'
            ELSE
                N''
            END

            + N')
        FROM
            '                                      + REPLACE(REPLACE(REPLACE(CASE WHEN @IsTemporalTableStoredProcedureFlag = 0
                                                                                      THEN REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N'')
                                                                                 ELSE REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N''' + 
                    CASE WHEN @TemporalForSystemTimeClause IS NOT NULL THEN N'' FOR SYSTEM_TIME '' + 
                            CASE @TemporalForSystemTimeClause
                                WHEN ''AS OF'' THEN N''AS OF '''''' + @TemporalForSystemTimeValue + ''''''''
                                WHEN ''FROM'' THEN N''FROM '''''' + @TemporalForSystemTimeBegin + '''''' TO '''''' + @TemporalForSystemTimeEnd + ''''''''
                                WHEN ''BETWEEN'' THEN N''BETWEEN '''''' + @TemporalForSystemTimeBegin + '''''' AND '''''' + @TemporalForSystemTimeEnd + ''''''''
                                WHEN ''CONTAINED IN'' THEN N''CONTAINED IN ('''''' + @TemporalForSystemTimeBegin + '''''', '''''' + @TemporalForSystemTimeEnd + '''''')''
                                WHEN ''ALL'' THEN N''ALL''
                            ELSE
                                N''AS OF '''''' + CAST(SYSUTCDATETIME() AS nvarchar(MAX)) + ''''''''
                            END
                    ELSE
                        N''''
                    END 
                    + ''')
                                                                             END
                                                                        ,N'/*[ON SPACE]*/'
                                                                        ,N'                '
                                                                     )
                                                                ,N'/*[INDENT SPACES]*/'
                                                                ,N'            '
                                                             )
                                                        ,N'/*[JOIN CONDITION]*/'
                                                        ,N''
                                                     ) + N'
        WHERE
            1 = 1'''                               + @WhereString + N'

SET @StringToExecute = @StringToExecute + N''
),Counts
    AS (
        SELECT RowsTotal = COUNT_BIG(*) FROM Keys AS [K]
    )
SELECT
     '                                             + REPLACE(@SelectString, N'/*[INDENT SPACES]*/', N'    ') + N'
    ,RowsTotal = Counts.RowsTotal
FROM
    Keys
    INNER JOIN '                                   + REPLACE(REPLACE(REPLACE(CASE WHEN @IsTemporalTableStoredProcedureFlag = 0
                                                                                      THEN REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N'')
                                                                                 ELSE REPLACE(@FromString, N'/*[TEMPORAL TABLE CLAUSE]*/', N''' + 
                    CASE WHEN @TemporalForSystemTimeClause IS NOT NULL THEN N'' FOR SYSTEM_TIME '' + 
                            CASE @TemporalForSystemTimeClause
                                WHEN ''AS OF'' THEN N''AS OF '''''' + @TemporalForSystemTimeValue + ''''''''
                                WHEN ''FROM'' THEN N''FROM '''''' + @TemporalForSystemTimeBegin + '''''' TO '''''' + @TemporalForSystemTimeEnd + ''''''''
                                WHEN ''BETWEEN'' THEN N''BETWEEN '''''' + @TemporalForSystemTimeBegin + '''''' AND '''''' + @TemporalForSystemTimeEnd + ''''''''
                                WHEN ''CONTAINED IN'' THEN N''CONTAINED IN ('''''' + @TemporalForSystemTimeBegin + '''''', '''''' + @TemporalForSystemTimeEnd + '''''')''
                                WHEN ''ALL'' THEN N''ALL''
                            ELSE
                                N''AS OF '''''' + CAST(SYSUTCDATETIME() AS nvarchar(MAX)) + ''''''''
                            END
                    ELSE
                        N''''
                    END 
                    + ''')
                                                                             END


                                                                        ,N'/*[ON SPACE]*/'
                                                                        ,N'        '
                                                                     )
                                                                ,N'/*[INDENT SPACES]*/'
                                                                ,N'    '
                                                             )
                                                        ,N'/*[JOIN CONDITION]*/'
                                                        ,N'
        ON [Keys].' + QUOTENAME(@IdentityColumnNameString) + N' = ' + QUOTENAME(@IdentityColumnTableAliasString) + N'.' + QUOTENAME(@IdentityColumnNameString) + N''
                                                     ) + N'
    CROSS JOIN Counts
WHERE
    [Keys].RowNumber > ((CAST(@PageNumber AS bigint) -1 ) * CAST(@PageSize AS bigint))
AND [Keys].RowNumber < ((CAST(@PageNumber AS bigint) * CAST(@PageSize AS bigint) ) + 1)
ORDER BY
    [Keys].RowNumber;''

        IF @Debug = 1
            BEGIN
                SELECT 
                    CAST(N''/* Click here to view the generated code.
Copy just the T-SQL below this block comment into a new query window to execute. */

'' AS nvarchar(MAX)) + @StringToExecute + N''


/* Copy just the T-SQL above this block comment into a new query window to execute. */
'' AS [processing-instruction(output)] FOR XML PATH('''')
            END;
        ELSE
            BEGIN
                SET @ParameterDefinition = N''@PageNumber int
                    ,@PageSize int
                    ,@AtTimeZoneName nvarchar(max)' + @SP_ExecuteSQLParameterDefinitionString + N''';

                EXEC sys.sp_executesql
                     @stmt = @StringToExecute
                    ,@params = @ParameterDefinition
                    ,@PageNumber = @PageNumber
                    ,@PageSize = @PageSize
                    ,@AtTimeZoneName = @AtTimeZoneName' + @SP_ExecuteSQLParametersString + N';
            END
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteSearchString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Prepare all the execute strings for debug output
                **********************************************************************************************************************/
                -- SQL Prompt formatting off
                SET @ExecuteOutputString = @ExecuteOutputString + @NewLineString + 
                    CASE WHEN LEN(@ExecuteDropString) > 0 THEN @ExecuteDropString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteCreateString) > 0 THEN @ExecuteCreateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteCreateMultipleString) > 0 THEN @ExecuteCreateMultipleString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteReadString) > 0 THEN @ExecuteReadString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteReadEagerString) > 0 THEN @ExecuteReadEagerString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteUpdateString) > 0 THEN @ExecuteUpdateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteUpdateMultipleString) > 0 THEN @ExecuteUpdateMultipleString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteUpsertString) > 0 THEN @ExecuteUpsertString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteIndateString) > 0 THEN @ExecuteIndateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteDeleteString) > 0 THEN @ExecuteDeleteString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteDeleteMultipleString) > 0 THEN @ExecuteDeleteMultipleString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteSearchString) > 0 THEN @ExecuteSearchString + @NewLineString + 'GO' + @NewLineString ELSE N'' END;
                -- SQL Prompt formatting on


                /**********************************************************************************************************************
                ** Mark this stored procedure row as processed
                **********************************************************************************************************************/
                UPDATE
                    #StoredProcedureList
                SET
                    IsProcessedFlag = 1
                WHERE
                    StoredProcedureId = @StoredProcedureId
                OPTION (RECOMPILE);

            END;


        /**********************************************************************************************************************
        ** Output the store procedure execute strings
        **********************************************************************************************************************/
        SELECT
            [processing-instruction(output)] = CAST(N'/* Click here to view the generated code.
If you execute dbo.sp_CRUDGen with @GenerateStoredProcedures = 1 it will create the stored procedures automatically.
Copy just the T-SQL below this block comment into a new query window to execute. */

'           AS nvarchar(MAX))                  + @ExecuteOutputString + N'


/* Copy just the T-SQL above this block comment into a new query window to execute. */
'
        FOR XML PATH('');


    END;
GO